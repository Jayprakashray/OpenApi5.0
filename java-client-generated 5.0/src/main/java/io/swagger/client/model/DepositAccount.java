/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountBillPayStatus;
import io.swagger.client.model.AccountContact;
import io.swagger.client.model.BalanceType;
import io.swagger.client.model.DepositTransaction;
import io.swagger.client.model.InterestRateType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * Information for a deposit account type
 */
@Schema(description = "Information for a deposit account type")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class DepositAccount extends Account {
  @SerializedName("balanceAsOf")
  private OffsetDateTime balanceAsOf = null;

  @SerializedName("currentBalance")
  private BigDecimal currentBalance = null;

  @SerializedName("openingDayBalance")
  private BigDecimal openingDayBalance = null;

  @SerializedName("availableBalance")
  private BigDecimal availableBalance = null;

  @SerializedName("annualPercentageYield")
  private BigDecimal annualPercentageYield = null;

  @SerializedName("interestYtd")
  private BigDecimal interestYtd = null;

  @SerializedName("term")
  private Integer term = null;

  @SerializedName("maturityDate")
  private LocalDate maturityDate = null;

  @SerializedName("transactions")
  private List<DepositTransaction> transactions = null;

  public DepositAccount balanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @Schema(description = "")
  public OffsetDateTime getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }

  public DepositAccount currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * Balance of funds in account
   * @return currentBalance
  **/
  @Schema(description = "Balance of funds in account")
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }

  public DepositAccount openingDayBalance(BigDecimal openingDayBalance) {
    this.openingDayBalance = openingDayBalance;
    return this;
  }

   /**
   * Day&#x27;s opening fund balance
   * @return openingDayBalance
  **/
  @Schema(description = "Day's opening fund balance")
  public BigDecimal getOpeningDayBalance() {
    return openingDayBalance;
  }

  public void setOpeningDayBalance(BigDecimal openingDayBalance) {
    this.openingDayBalance = openingDayBalance;
  }

  public DepositAccount availableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Balance of funds available for use
   * @return availableBalance
  **/
  @Schema(description = "Balance of funds available for use")
  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }

  public DepositAccount annualPercentageYield(BigDecimal annualPercentageYield) {
    this.annualPercentageYield = annualPercentageYield;
    return this;
  }

   /**
   * Annual Percentage Yield
   * @return annualPercentageYield
  **/
  @Schema(description = "Annual Percentage Yield")
  public BigDecimal getAnnualPercentageYield() {
    return annualPercentageYield;
  }

  public void setAnnualPercentageYield(BigDecimal annualPercentageYield) {
    this.annualPercentageYield = annualPercentageYield;
  }

  public DepositAccount interestYtd(BigDecimal interestYtd) {
    this.interestYtd = interestYtd;
    return this;
  }

   /**
   * YTD Interest
   * @return interestYtd
  **/
  @Schema(description = "YTD Interest")
  public BigDecimal getInterestYtd() {
    return interestYtd;
  }

  public void setInterestYtd(BigDecimal interestYtd) {
    this.interestYtd = interestYtd;
  }

  public DepositAccount term(Integer term) {
    this.term = term;
    return this;
  }

   /**
   * Term of CD in months
   * @return term
  **/
  @Schema(description = "Term of CD in months")
  public Integer getTerm() {
    return term;
  }

  public void setTerm(Integer term) {
    this.term = term;
  }

  public DepositAccount maturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Get maturityDate
   * @return maturityDate
  **/
  @Schema(description = "")
  public LocalDate getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
  }

  public DepositAccount transactions(List<DepositTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public DepositAccount addTransactionsItem(DepositTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<DepositTransaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions on the deposit account
   * @return transactions
  **/
  @Schema(description = "Transactions on the deposit account")
  public List<DepositTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<DepositTransaction> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DepositAccount depositAccount = (DepositAccount) o;
    return Objects.equals(this.balanceAsOf, depositAccount.balanceAsOf) &&
        Objects.equals(this.currentBalance, depositAccount.currentBalance) &&
        Objects.equals(this.openingDayBalance, depositAccount.openingDayBalance) &&
        Objects.equals(this.availableBalance, depositAccount.availableBalance) &&
        Objects.equals(this.annualPercentageYield, depositAccount.annualPercentageYield) &&
        Objects.equals(this.interestYtd, depositAccount.interestYtd) &&
        Objects.equals(this.term, depositAccount.term) &&
        Objects.equals(this.maturityDate, depositAccount.maturityDate) &&
        Objects.equals(this.transactions, depositAccount.transactions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceAsOf, currentBalance, openingDayBalance, availableBalance, annualPercentageYield, interestYtd, term, maturityDate, transactions, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DepositAccount {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    openingDayBalance: ").append(toIndentedString(openingDayBalance)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    annualPercentageYield: ").append(toIndentedString(annualPercentageYield)).append("\n");
    sb.append("    interestYtd: ").append(toIndentedString(interestYtd)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
