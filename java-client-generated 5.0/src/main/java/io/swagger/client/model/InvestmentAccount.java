/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountBillPayStatus;
import io.swagger.client.model.AccountContact;
import io.swagger.client.model.BalanceType;
import io.swagger.client.model.Contribution;
import io.swagger.client.model.Holding;
import io.swagger.client.model.InterestRateType;
import io.swagger.client.model.InvestmentBalance;
import io.swagger.client.model.InvestmentLoan;
import io.swagger.client.model.InvestmentTransaction;
import io.swagger.client.model.OpenOrder;
import io.swagger.client.model.PensionSource;
import io.swagger.client.model.Vesting;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * An investment account type and information such as balances, transactions, holdings and privileges
 */
@Schema(description = "An investment account type and information such as balances, transactions, holdings and privileges")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class InvestmentAccount extends Account {
  @SerializedName("balanceAsOf")
  private OffsetDateTime balanceAsOf = null;

  @SerializedName("allowedCheckWriting")
  private Boolean allowedCheckWriting = null;

  @SerializedName("allowedOptionTrade")
  private Boolean allowedOptionTrade = null;

  @SerializedName("currentValue")
  private BigDecimal currentValue = null;

  @SerializedName("holdings")
  private List<Holding> holdings = null;

  @SerializedName("openOrders")
  private List<OpenOrder> openOrders = null;

  @SerializedName("contribution")
  private List<Contribution> contribution = null;

  @SerializedName("vesting")
  private List<Vesting> vesting = null;

  @SerializedName("investmentLoans")
  private List<InvestmentLoan> investmentLoans = null;

  @SerializedName("availableCashBalance")
  private BigDecimal availableCashBalance = null;

  @SerializedName("margin")
  private Boolean margin = null;

  @SerializedName("marginBalance")
  private BigDecimal marginBalance = null;

  @SerializedName("shortBalance")
  private BigDecimal shortBalance = null;

  @SerializedName("rolloverAmount")
  private BigDecimal rolloverAmount = null;

  @SerializedName("employerName")
  private String employerName = null;

  @SerializedName("brokerId")
  private String brokerId = null;

  @SerializedName("planId")
  private String planId = null;

  @SerializedName("calendaryearFor401K")
  private OffsetDateTime calendaryearFor401K = null;

  @SerializedName("calendarYearFor401K")
  private Integer calendarYearFor401K = null;

  @SerializedName("balanceList")
  private List<InvestmentBalance> balanceList = null;

  @SerializedName("dailyChange")
  private BigDecimal dailyChange = null;

  @SerializedName("percentageChange")
  private BigDecimal percentageChange = null;

  @SerializedName("transactions")
  private List<InvestmentTransaction> transactions = null;

  @SerializedName("pensionSource")
  private List<PensionSource> pensionSource = null;

  public InvestmentAccount balanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @Schema(description = "")
  public OffsetDateTime getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }

  public InvestmentAccount allowedCheckWriting(Boolean allowedCheckWriting) {
    this.allowedCheckWriting = allowedCheckWriting;
    return this;
  }

   /**
   * Check writing privileges
   * @return allowedCheckWriting
  **/
  @Schema(description = "Check writing privileges")
  public Boolean isAllowedCheckWriting() {
    return allowedCheckWriting;
  }

  public void setAllowedCheckWriting(Boolean allowedCheckWriting) {
    this.allowedCheckWriting = allowedCheckWriting;
  }

  public InvestmentAccount allowedOptionTrade(Boolean allowedOptionTrade) {
    this.allowedOptionTrade = allowedOptionTrade;
    return this;
  }

   /**
   * Allowed to trade options
   * @return allowedOptionTrade
  **/
  @Schema(description = "Allowed to trade options")
  public Boolean isAllowedOptionTrade() {
    return allowedOptionTrade;
  }

  public void setAllowedOptionTrade(Boolean allowedOptionTrade) {
    this.allowedOptionTrade = allowedOptionTrade;
  }

  public InvestmentAccount currentValue(BigDecimal currentValue) {
    this.currentValue = currentValue;
    return this;
  }

   /**
   * Total current value of all investments
   * @return currentValue
  **/
  @Schema(description = "Total current value of all investments")
  public BigDecimal getCurrentValue() {
    return currentValue;
  }

  public void setCurrentValue(BigDecimal currentValue) {
    this.currentValue = currentValue;
  }

  public InvestmentAccount holdings(List<Holding> holdings) {
    this.holdings = holdings;
    return this;
  }

  public InvestmentAccount addHoldingsItem(Holding holdingsItem) {
    if (this.holdings == null) {
      this.holdings = new ArrayList<Holding>();
    }
    this.holdings.add(holdingsItem);
    return this;
  }

   /**
   * Holdings in the investment account
   * @return holdings
  **/
  @Schema(description = "Holdings in the investment account")
  public List<Holding> getHoldings() {
    return holdings;
  }

  public void setHoldings(List<Holding> holdings) {
    this.holdings = holdings;
  }

  public InvestmentAccount openOrders(List<OpenOrder> openOrders) {
    this.openOrders = openOrders;
    return this;
  }

  public InvestmentAccount addOpenOrdersItem(OpenOrder openOrdersItem) {
    if (this.openOrders == null) {
      this.openOrders = new ArrayList<OpenOrder>();
    }
    this.openOrders.add(openOrdersItem);
    return this;
  }

   /**
   * Open orders in the investment account
   * @return openOrders
  **/
  @Schema(description = "Open orders in the investment account")
  public List<OpenOrder> getOpenOrders() {
    return openOrders;
  }

  public void setOpenOrders(List<OpenOrder> openOrders) {
    this.openOrders = openOrders;
  }

  public InvestmentAccount contribution(List<Contribution> contribution) {
    this.contribution = contribution;
    return this;
  }

  public InvestmentAccount addContributionItem(Contribution contributionItem) {
    if (this.contribution == null) {
      this.contribution = new ArrayList<Contribution>();
    }
    this.contribution.add(contributionItem);
    return this;
  }

   /**
   * Describes how new contributions are distributed among the available securities
   * @return contribution
  **/
  @Schema(description = "Describes how new contributions are distributed among the available securities")
  public List<Contribution> getContribution() {
    return contribution;
  }

  public void setContribution(List<Contribution> contribution) {
    this.contribution = contribution;
  }

  public InvestmentAccount vesting(List<Vesting> vesting) {
    this.vesting = vesting;
    return this;
  }

  public InvestmentAccount addVestingItem(Vesting vestingItem) {
    if (this.vesting == null) {
      this.vesting = new ArrayList<Vesting>();
    }
    this.vesting.add(vestingItem);
    return this;
  }

   /**
   * Provides the past, present, and future vesting schedule and percentages
   * @return vesting
  **/
  @Schema(description = "Provides the past, present, and future vesting schedule and percentages")
  public List<Vesting> getVesting() {
    return vesting;
  }

  public void setVesting(List<Vesting> vesting) {
    this.vesting = vesting;
  }

  public InvestmentAccount investmentLoans(List<InvestmentLoan> investmentLoans) {
    this.investmentLoans = investmentLoans;
    return this;
  }

  public InvestmentAccount addInvestmentLoansItem(InvestmentLoan investmentLoansItem) {
    if (this.investmentLoans == null) {
      this.investmentLoans = new ArrayList<InvestmentLoan>();
    }
    this.investmentLoans.add(investmentLoansItem);
    return this;
  }

   /**
   * Investment loans in the account
   * @return investmentLoans
  **/
  @Schema(description = "Investment loans in the account")
  public List<InvestmentLoan> getInvestmentLoans() {
    return investmentLoans;
  }

  public void setInvestmentLoans(List<InvestmentLoan> investmentLoans) {
    this.investmentLoans = investmentLoans;
  }

  public InvestmentAccount availableCashBalance(BigDecimal availableCashBalance) {
    this.availableCashBalance = availableCashBalance;
    return this;
  }

   /**
   * Cash balance across all sub-accounts. Should include sweep funds
   * @return availableCashBalance
  **/
  @Schema(description = "Cash balance across all sub-accounts. Should include sweep funds")
  public BigDecimal getAvailableCashBalance() {
    return availableCashBalance;
  }

  public void setAvailableCashBalance(BigDecimal availableCashBalance) {
    this.availableCashBalance = availableCashBalance;
  }

  public InvestmentAccount margin(Boolean margin) {
    this.margin = margin;
    return this;
  }

   /**
   * Margin trading is allowed
   * @return margin
  **/
  @Schema(description = "Margin trading is allowed")
  public Boolean isMargin() {
    return margin;
  }

  public void setMargin(Boolean margin) {
    this.margin = margin;
  }

  public InvestmentAccount marginBalance(BigDecimal marginBalance) {
    this.marginBalance = marginBalance;
    return this;
  }

   /**
   * Margin balance
   * @return marginBalance
  **/
  @Schema(description = "Margin balance")
  public BigDecimal getMarginBalance() {
    return marginBalance;
  }

  public void setMarginBalance(BigDecimal marginBalance) {
    this.marginBalance = marginBalance;
  }

  public InvestmentAccount shortBalance(BigDecimal shortBalance) {
    this.shortBalance = shortBalance;
    return this;
  }

   /**
   * Short balance
   * @return shortBalance
  **/
  @Schema(description = "Short balance")
  public BigDecimal getShortBalance() {
    return shortBalance;
  }

  public void setShortBalance(BigDecimal shortBalance) {
    this.shortBalance = shortBalance;
  }

  public InvestmentAccount rolloverAmount(BigDecimal rolloverAmount) {
    this.rolloverAmount = rolloverAmount;
    return this;
  }

   /**
   * Rollover amount
   * @return rolloverAmount
  **/
  @Schema(description = "Rollover amount")
  public BigDecimal getRolloverAmount() {
    return rolloverAmount;
  }

  public void setRolloverAmount(BigDecimal rolloverAmount) {
    this.rolloverAmount = rolloverAmount;
  }

  public InvestmentAccount employerName(String employerName) {
    this.employerName = employerName;
    return this;
  }

   /**
   * Name of the employer in investment 401k Plan
   * @return employerName
  **/
  @Schema(description = "Name of the employer in investment 401k Plan")
  public String getEmployerName() {
    return employerName;
  }

  public void setEmployerName(String employerName) {
    this.employerName = employerName;
  }

  public InvestmentAccount brokerId(String brokerId) {
    this.brokerId = brokerId;
    return this;
  }

   /**
   * Unique identifier FI
   * @return brokerId
  **/
  @Schema(description = "Unique identifier FI")
  public String getBrokerId() {
    return brokerId;
  }

  public void setBrokerId(String brokerId) {
    this.brokerId = brokerId;
  }

  public InvestmentAccount planId(String planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Plan number for Investment 401k plan
   * @return planId
  **/
  @Schema(description = "Plan number for Investment 401k plan")
  public String getPlanId() {
    return planId;
  }

  public void setPlanId(String planId) {
    this.planId = planId;
  }

  public InvestmentAccount calendaryearFor401K(OffsetDateTime calendaryearFor401K) {
    this.calendaryearFor401K = calendaryearFor401K;
    return this;
  }

   /**
   * Get calendaryearFor401K
   * @return calendaryearFor401K
  **/
  @Schema(description = "")
  public OffsetDateTime getCalendaryearFor401K() {
    return calendaryearFor401K;
  }

  public void setCalendaryearFor401K(OffsetDateTime calendaryearFor401K) {
    this.calendaryearFor401K = calendaryearFor401K;
  }

  public InvestmentAccount calendarYearFor401K(Integer calendarYearFor401K) {
    this.calendarYearFor401K = calendarYearFor401K;
    return this;
  }

   /**
   * The calendar year for this 401k account
   * @return calendarYearFor401K
  **/
  @Schema(description = "The calendar year for this 401k account")
  public Integer getCalendarYearFor401K() {
    return calendarYearFor401K;
  }

  public void setCalendarYearFor401K(Integer calendarYearFor401K) {
    this.calendarYearFor401K = calendarYearFor401K;
  }

  public InvestmentAccount balanceList(List<InvestmentBalance> balanceList) {
    this.balanceList = balanceList;
    return this;
  }

  public InvestmentAccount addBalanceListItem(InvestmentBalance balanceListItem) {
    if (this.balanceList == null) {
      this.balanceList = new ArrayList<InvestmentBalance>();
    }
    this.balanceList.add(balanceListItem);
    return this;
  }

   /**
   * List of balances. Aggregate of name value pairs
   * @return balanceList
  **/
  @Schema(description = "List of balances. Aggregate of name value pairs")
  public List<InvestmentBalance> getBalanceList() {
    return balanceList;
  }

  public void setBalanceList(List<InvestmentBalance> balanceList) {
    this.balanceList = balanceList;
  }

  public InvestmentAccount dailyChange(BigDecimal dailyChange) {
    this.dailyChange = dailyChange;
    return this;
  }

   /**
   * Daily change
   * @return dailyChange
  **/
  @Schema(description = "Daily change")
  public BigDecimal getDailyChange() {
    return dailyChange;
  }

  public void setDailyChange(BigDecimal dailyChange) {
    this.dailyChange = dailyChange;
  }

  public InvestmentAccount percentageChange(BigDecimal percentageChange) {
    this.percentageChange = percentageChange;
    return this;
  }

   /**
   * Percentage change
   * @return percentageChange
  **/
  @Schema(description = "Percentage change")
  public BigDecimal getPercentageChange() {
    return percentageChange;
  }

  public void setPercentageChange(BigDecimal percentageChange) {
    this.percentageChange = percentageChange;
  }

  public InvestmentAccount transactions(List<InvestmentTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public InvestmentAccount addTransactionsItem(InvestmentTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<InvestmentTransaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions on the investment account
   * @return transactions
  **/
  @Schema(description = "Transactions on the investment account")
  public List<InvestmentTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<InvestmentTransaction> transactions) {
    this.transactions = transactions;
  }

  public InvestmentAccount pensionSource(List<PensionSource> pensionSource) {
    this.pensionSource = pensionSource;
    return this;
  }

  public InvestmentAccount addPensionSourceItem(PensionSource pensionSourceItem) {
    if (this.pensionSource == null) {
      this.pensionSource = new ArrayList<PensionSource>();
    }
    this.pensionSource.add(pensionSourceItem);
    return this;
  }

   /**
   * Pension sources in the investment account
   * @return pensionSource
  **/
  @Schema(description = "Pension sources in the investment account")
  public List<PensionSource> getPensionSource() {
    return pensionSource;
  }

  public void setPensionSource(List<PensionSource> pensionSource) {
    this.pensionSource = pensionSource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvestmentAccount investmentAccount = (InvestmentAccount) o;
    return Objects.equals(this.balanceAsOf, investmentAccount.balanceAsOf) &&
        Objects.equals(this.allowedCheckWriting, investmentAccount.allowedCheckWriting) &&
        Objects.equals(this.allowedOptionTrade, investmentAccount.allowedOptionTrade) &&
        Objects.equals(this.currentValue, investmentAccount.currentValue) &&
        Objects.equals(this.holdings, investmentAccount.holdings) &&
        Objects.equals(this.openOrders, investmentAccount.openOrders) &&
        Objects.equals(this.contribution, investmentAccount.contribution) &&
        Objects.equals(this.vesting, investmentAccount.vesting) &&
        Objects.equals(this.investmentLoans, investmentAccount.investmentLoans) &&
        Objects.equals(this.availableCashBalance, investmentAccount.availableCashBalance) &&
        Objects.equals(this.margin, investmentAccount.margin) &&
        Objects.equals(this.marginBalance, investmentAccount.marginBalance) &&
        Objects.equals(this.shortBalance, investmentAccount.shortBalance) &&
        Objects.equals(this.rolloverAmount, investmentAccount.rolloverAmount) &&
        Objects.equals(this.employerName, investmentAccount.employerName) &&
        Objects.equals(this.brokerId, investmentAccount.brokerId) &&
        Objects.equals(this.planId, investmentAccount.planId) &&
        Objects.equals(this.calendaryearFor401K, investmentAccount.calendaryearFor401K) &&
        Objects.equals(this.calendarYearFor401K, investmentAccount.calendarYearFor401K) &&
        Objects.equals(this.balanceList, investmentAccount.balanceList) &&
        Objects.equals(this.dailyChange, investmentAccount.dailyChange) &&
        Objects.equals(this.percentageChange, investmentAccount.percentageChange) &&
        Objects.equals(this.transactions, investmentAccount.transactions) &&
        Objects.equals(this.pensionSource, investmentAccount.pensionSource) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceAsOf, allowedCheckWriting, allowedOptionTrade, currentValue, holdings, openOrders, contribution, vesting, investmentLoans, availableCashBalance, margin, marginBalance, shortBalance, rolloverAmount, employerName, brokerId, planId, calendaryearFor401K, calendarYearFor401K, balanceList, dailyChange, percentageChange, transactions, pensionSource, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvestmentAccount {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    allowedCheckWriting: ").append(toIndentedString(allowedCheckWriting)).append("\n");
    sb.append("    allowedOptionTrade: ").append(toIndentedString(allowedOptionTrade)).append("\n");
    sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
    sb.append("    holdings: ").append(toIndentedString(holdings)).append("\n");
    sb.append("    openOrders: ").append(toIndentedString(openOrders)).append("\n");
    sb.append("    contribution: ").append(toIndentedString(contribution)).append("\n");
    sb.append("    vesting: ").append(toIndentedString(vesting)).append("\n");
    sb.append("    investmentLoans: ").append(toIndentedString(investmentLoans)).append("\n");
    sb.append("    availableCashBalance: ").append(toIndentedString(availableCashBalance)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
    sb.append("    shortBalance: ").append(toIndentedString(shortBalance)).append("\n");
    sb.append("    rolloverAmount: ").append(toIndentedString(rolloverAmount)).append("\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    brokerId: ").append(toIndentedString(brokerId)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    calendaryearFor401K: ").append(toIndentedString(calendaryearFor401K)).append("\n");
    sb.append("    calendarYearFor401K: ").append(toIndentedString(calendarYearFor401K)).append("\n");
    sb.append("    balanceList: ").append(toIndentedString(balanceList)).append("\n");
    sb.append("    dailyChange: ").append(toIndentedString(dailyChange)).append("\n");
    sb.append("    percentageChange: ").append(toIndentedString(percentageChange)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    pensionSource: ").append(toIndentedString(pensionSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
