/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The operationIds for all FDX APIs
 */
@JsonAdapter(OperationId.Adapter.class)
public enum OperationId {
  CANCELPAYMENT("cancelPayment"),
  CANCELRECURRINGPAYMENT("cancelRecurringPayment"),
  CANCELTRANSFER("cancelTransfer"),
  CREATEPAYEE("createPayee"),
  CREATETAXFORM("createTaxForm"),
  DELETEPAYEE("deletePayee"),
  GETACCOUNT("getAccount"),
  GETACCOUNTCONTACT("getAccountContact"),
  GETACCOUNTPAYMENTNETWORKS("getAccountPaymentNetworks"),
  GETACCOUNTSTATEMENT("getAccountStatement"),
  GETACCOUNTTRANSACTIONIMAGES("getAccountTransactionImages"),
  GETAVAILABILITY("getAvailability"),
  GETCAPABILITY("getCapability"),
  GETCERTIFICATIONMETRICS("getCertificationMetrics"),
  GETCONSENTGRANT("getConsentGrant"),
  GETCUSTOMER("getCustomer"),
  GETCUSTOMERINFO("getCustomerInfo"),
  GETCUSTOMERS("getCustomers"),
  GETPAYEE("getPayee"),
  GETPAYMENT("getPayment"),
  GETPAYMENTSFORRECURRINGPAYMENT("getPaymentsForRecurringPayment"),
  GETRECURRINGPAYMENT("getRecurringPayment"),
  GETREWARDPROGRAM("getRewardProgram"),
  GETREWARDPROGRAMCATEGORIES("getRewardProgramCategories"),
  GETTAXFORM("getTaxForm"),
  GETTRANSFER("getTransfer"),
  GETTRANSFERSTATUS("getTransferStatus"),
  REPORTSUSPECTEDFRAUDINCIDENT("reportSuspectedFraudIncident"),
  REQUESTACCOUNTTRANSFER("requestAccountTransfer"),
  SCHEDULEPAYMENT("schedulePayment"),
  SCHEDULERECURRINGPAYMENT("scheduleRecurringPayment"),
  SEARCHFORACCOUNTS("searchForAccounts"),
  SEARCHFORACCOUNTSTATEMENTS("searchForAccountStatements"),
  SEARCHFORACCOUNTTRANSACTIONS("searchForAccountTransactions"),
  SEARCHFORPAYEES("searchForPayees"),
  SEARCHFORPAYMENTS("searchForPayments"),
  SEARCHFORRECURRINGPAYMENTS("searchForRecurringPayments"),
  SEARCHFORTAXFORMS("searchForTaxForms"),
  SEARCHFORTRANSFERS("searchForTransfers"),
  SEARCHREWARDPROGRAMS("searchRewardPrograms"),
  UPDATEPAYEE("updatePayee"),
  UPDATEPAYMENT("updatePayment"),
  UPDATERECURRINGPAYMENT("updateRecurringPayment"),
  UPDATETAXFORM("updateTaxForm");

  private String value;

  OperationId(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OperationId fromValue(String input) {
    for (OperationId b : OperationId.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<OperationId> {
    @Override
    public void write(final JsonWriter jsonWriter, final OperationId enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public OperationId read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return OperationId.fromValue((String)(value));
    }
  }
}
