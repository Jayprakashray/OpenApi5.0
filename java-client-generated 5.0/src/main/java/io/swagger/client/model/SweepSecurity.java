/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.OffsetDateTime;
/**
 * A sweep security
 */
@Schema(description = "A sweep security")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class SweepSecurity {
  @SerializedName("currentBalance")
  private BigDecimal currentBalance = null;

  @SerializedName("availableBalance")
  private BigDecimal availableBalance = null;

  @SerializedName("balanceAsOf")
  private OffsetDateTime balanceAsOf = null;

  @SerializedName("checks")
  private Boolean checks = null;

  public SweepSecurity currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * Balance of funds in account
   * @return currentBalance
  **/
  @Schema(description = "Balance of funds in account")
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }

  public SweepSecurity availableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Balance of funds available for use
   * @return availableBalance
  **/
  @Schema(description = "Balance of funds available for use")
  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }

  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }

  public SweepSecurity balanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @Schema(description = "")
  public OffsetDateTime getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }

  public SweepSecurity checks(Boolean checks) {
    this.checks = checks;
    return this;
  }

   /**
   * Whether or not checks can be written on the account
   * @return checks
  **/
  @Schema(description = "Whether or not checks can be written on the account")
  public Boolean isChecks() {
    return checks;
  }

  public void setChecks(Boolean checks) {
    this.checks = checks;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SweepSecurity sweepSecurity = (SweepSecurity) o;
    return Objects.equals(this.currentBalance, sweepSecurity.currentBalance) &&
        Objects.equals(this.availableBalance, sweepSecurity.availableBalance) &&
        Objects.equals(this.balanceAsOf, sweepSecurity.balanceAsOf) &&
        Objects.equals(this.checks, sweepSecurity.checks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentBalance, availableBalance, balanceAsOf, checks);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SweepSecurity {\n");
    
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
