/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.PaymentNetworkIdentifierType;
import io.swagger.client.model.PaymentNetworkType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * This provides details required to execute a transaction against the account within the payment network
 */
@Schema(description = "This provides details required to execute a transaction against the account within the payment network")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class AccountPaymentNetwork {
  @SerializedName("bankId")
  private String bankId = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("identifierType")
  private PaymentNetworkIdentifierType identifierType = null;

  @SerializedName("type")
  private PaymentNetworkType type = null;

  @SerializedName("transferIn")
  private Boolean transferIn = null;

  @SerializedName("transferOut")
  private Boolean transferOut = null;

  public AccountPaymentNetwork bankId(String bankId) {
    this.bankId = bankId;
    return this;
  }

   /**
   * Bank identifier used by the payment network ie. Routing Number
   * @return bankId
  **/
  @Schema(description = "Bank identifier used by the payment network ie. Routing Number")
  public String getBankId() {
    return bankId;
  }

  public void setBankId(String bankId) {
    this.bankId = bankId;
  }

  public AccountPaymentNetwork identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * The number used to identify the account within the payment network. If identifierType is ACCOUNT_NUMBER, this is the account number; if identifierType is TOKENIZED_ACCOUNT_NUMBER, this is a tokenized account number
   * @return identifier
  **/
  @Schema(description = "The number used to identify the account within the payment network. If identifierType is ACCOUNT_NUMBER, this is the account number; if identifierType is TOKENIZED_ACCOUNT_NUMBER, this is a tokenized account number")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public AccountPaymentNetwork identifierType(PaymentNetworkIdentifierType identifierType) {
    this.identifierType = identifierType;
    return this;
  }

   /**
   * Get identifierType
   * @return identifierType
  **/
  @Schema(description = "")
  public PaymentNetworkIdentifierType getIdentifierType() {
    return identifierType;
  }

  public void setIdentifierType(PaymentNetworkIdentifierType identifierType) {
    this.identifierType = identifierType;
  }

  public AccountPaymentNetwork type(PaymentNetworkType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public PaymentNetworkType getType() {
    return type;
  }

  public void setType(PaymentNetworkType type) {
    this.type = type;
  }

  public AccountPaymentNetwork transferIn(Boolean transferIn) {
    this.transferIn = transferIn;
    return this;
  }

   /**
   * Can transfer funds to the account using this information
   * @return transferIn
  **/
  @Schema(description = "Can transfer funds to the account using this information")
  public Boolean isTransferIn() {
    return transferIn;
  }

  public void setTransferIn(Boolean transferIn) {
    this.transferIn = transferIn;
  }

  public AccountPaymentNetwork transferOut(Boolean transferOut) {
    this.transferOut = transferOut;
    return this;
  }

   /**
   * Can transfer funds from the account using this information
   * @return transferOut
  **/
  @Schema(description = "Can transfer funds from the account using this information")
  public Boolean isTransferOut() {
    return transferOut;
  }

  public void setTransferOut(Boolean transferOut) {
    this.transferOut = transferOut;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPaymentNetwork accountPaymentNetwork = (AccountPaymentNetwork) o;
    return Objects.equals(this.bankId, accountPaymentNetwork.bankId) &&
        Objects.equals(this.identifier, accountPaymentNetwork.identifier) &&
        Objects.equals(this.identifierType, accountPaymentNetwork.identifierType) &&
        Objects.equals(this.type, accountPaymentNetwork.type) &&
        Objects.equals(this.transferIn, accountPaymentNetwork.transferIn) &&
        Objects.equals(this.transferOut, accountPaymentNetwork.transferOut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankId, identifier, identifierType, type, transferIn, transferOut);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPaymentNetwork {\n");
    
    sb.append("    bankId: ").append(toIndentedString(bankId)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    identifierType: ").append(toIndentedString(identifierType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    transferIn: ").append(toIndentedString(transferIn)).append("\n");
    sb.append("    transferOut: ").append(toIndentedString(transferOut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
