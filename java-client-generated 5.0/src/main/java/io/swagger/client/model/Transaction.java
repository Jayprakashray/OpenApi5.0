/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DebitCreditMemo;
import io.swagger.client.model.FiAttribute;
import io.swagger.client.model.HateoasLinks;
import io.swagger.client.model.Iso4217Code;
import io.swagger.client.model.LineItem;
import io.swagger.client.model.TransactionReward;
import io.swagger.client.model.TransactionStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Base entity for financial transactions
 */
@Schema(description = "Base entity for financial transactions")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class Transaction {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("referenceTransactionId")
  private String referenceTransactionId = null;

  @SerializedName("postedTimestamp")
  private OffsetDateTime postedTimestamp = null;

  @SerializedName("transactionTimestamp")
  private OffsetDateTime transactionTimestamp = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("memo")
  private String memo = null;

  @SerializedName("debitCreditMemo")
  private DebitCreditMemo debitCreditMemo = null;

  @SerializedName("category")
  private String category = null;

  @SerializedName("subCategory")
  private String subCategory = null;

  @SerializedName("reference")
  private String reference = null;

  @SerializedName("status")
  private TransactionStatus status = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("foreignAmount")
  private BigDecimal foreignAmount = null;

  @SerializedName("foreignCurrency")
  private Iso4217Code foreignCurrency = null;

  @SerializedName("imageIds")
  private List<String> imageIds = null;

  @SerializedName("lineItem")
  private List<LineItem> lineItem = null;

  @SerializedName("reward")
  private TransactionReward reward = null;

  @SerializedName("fiAttributes")
  private List<FiAttribute> fiAttributes = null;

  @SerializedName("links")
  private HateoasLinks links = null;

  public Transaction accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public Transaction transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @Schema(description = "")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public Transaction referenceTransactionId(String referenceTransactionId) {
    this.referenceTransactionId = referenceTransactionId;
    return this;
  }

   /**
   * Get referenceTransactionId
   * @return referenceTransactionId
  **/
  @Schema(description = "")
  public String getReferenceTransactionId() {
    return referenceTransactionId;
  }

  public void setReferenceTransactionId(String referenceTransactionId) {
    this.referenceTransactionId = referenceTransactionId;
  }

  public Transaction postedTimestamp(OffsetDateTime postedTimestamp) {
    this.postedTimestamp = postedTimestamp;
    return this;
  }

   /**
   * Get postedTimestamp
   * @return postedTimestamp
  **/
  @Schema(description = "")
  public OffsetDateTime getPostedTimestamp() {
    return postedTimestamp;
  }

  public void setPostedTimestamp(OffsetDateTime postedTimestamp) {
    this.postedTimestamp = postedTimestamp;
  }

  public Transaction transactionTimestamp(OffsetDateTime transactionTimestamp) {
    this.transactionTimestamp = transactionTimestamp;
    return this;
  }

   /**
   * Get transactionTimestamp
   * @return transactionTimestamp
  **/
  @Schema(description = "")
  public OffsetDateTime getTransactionTimestamp() {
    return transactionTimestamp;
  }

  public void setTransactionTimestamp(OffsetDateTime transactionTimestamp) {
    this.transactionTimestamp = transactionTimestamp;
  }

  public Transaction description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the transaction
   * @return description
  **/
  @Schema(description = "The description of the transaction")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Transaction memo(String memo) {
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @Schema(description = "")
  public String getMemo() {
    return memo;
  }

  public void setMemo(String memo) {
    this.memo = memo;
  }

  public Transaction debitCreditMemo(DebitCreditMemo debitCreditMemo) {
    this.debitCreditMemo = debitCreditMemo;
    return this;
  }

   /**
   * Get debitCreditMemo
   * @return debitCreditMemo
  **/
  @Schema(description = "")
  public DebitCreditMemo getDebitCreditMemo() {
    return debitCreditMemo;
  }

  public void setDebitCreditMemo(DebitCreditMemo debitCreditMemo) {
    this.debitCreditMemo = debitCreditMemo;
  }

  public Transaction category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Transaction category, preferably MCC or SIC.
   * @return category
  **/
  @Schema(description = "Transaction category, preferably MCC or SIC.")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public Transaction subCategory(String subCategory) {
    this.subCategory = subCategory;
    return this;
  }

   /**
   * Transaction category detail
   * @return subCategory
  **/
  @Schema(description = "Transaction category detail")
  public String getSubCategory() {
    return subCategory;
  }

  public void setSubCategory(String subCategory) {
    this.subCategory = subCategory;
  }

  public Transaction reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * A tracking reference identifier
   * @return reference
  **/
  @Schema(description = "A tracking reference identifier")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public Transaction status(TransactionStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public TransactionStatus getStatus() {
    return status;
  }

  public void setStatus(TransactionStatus status) {
    this.status = status;
  }

  public Transaction amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of money in the account currency
   * @return amount
  **/
  @Schema(description = "The amount of money in the account currency")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public Transaction foreignAmount(BigDecimal foreignAmount) {
    this.foreignAmount = foreignAmount;
    return this;
  }

   /**
   * The amount of money in the foreign currency
   * @return foreignAmount
  **/
  @Schema(description = "The amount of money in the foreign currency")
  public BigDecimal getForeignAmount() {
    return foreignAmount;
  }

  public void setForeignAmount(BigDecimal foreignAmount) {
    this.foreignAmount = foreignAmount;
  }

  public Transaction foreignCurrency(Iso4217Code foreignCurrency) {
    this.foreignCurrency = foreignCurrency;
    return this;
  }

   /**
   * Get foreignCurrency
   * @return foreignCurrency
  **/
  @Schema(description = "")
  public Iso4217Code getForeignCurrency() {
    return foreignCurrency;
  }

  public void setForeignCurrency(Iso4217Code foreignCurrency) {
    this.foreignCurrency = foreignCurrency;
  }

  public Transaction imageIds(List<String> imageIds) {
    this.imageIds = imageIds;
    return this;
  }

  public Transaction addImageIdsItem(String imageIdsItem) {
    if (this.imageIds == null) {
      this.imageIds = new ArrayList<String>();
    }
    this.imageIds.add(imageIdsItem);
    return this;
  }

   /**
   * Array of Image Identifiers (unique to this transaction) used to retrieve Images of check or transaction receipt
   * @return imageIds
  **/
  @Schema(description = "Array of Image Identifiers (unique to this transaction) used to retrieve Images of check or transaction receipt")
  public List<String> getImageIds() {
    return imageIds;
  }

  public void setImageIds(List<String> imageIds) {
    this.imageIds = imageIds;
  }

  public Transaction lineItem(List<LineItem> lineItem) {
    this.lineItem = lineItem;
    return this;
  }

  public Transaction addLineItemItem(LineItem lineItemItem) {
    if (this.lineItem == null) {
      this.lineItem = new ArrayList<LineItem>();
    }
    this.lineItem.add(lineItemItem);
    return this;
  }

   /**
   * Breakdown of the transaction details
   * @return lineItem
  **/
  @Schema(description = "Breakdown of the transaction details")
  public List<LineItem> getLineItem() {
    return lineItem;
  }

  public void setLineItem(List<LineItem> lineItem) {
    this.lineItem = lineItem;
  }

  public Transaction reward(TransactionReward reward) {
    this.reward = reward;
    return this;
  }

   /**
   * Get reward
   * @return reward
  **/
  @Schema(description = "")
  public TransactionReward getReward() {
    return reward;
  }

  public void setReward(TransactionReward reward) {
    this.reward = reward;
  }

  public Transaction fiAttributes(List<FiAttribute> fiAttributes) {
    this.fiAttributes = fiAttributes;
    return this;
  }

  public Transaction addFiAttributesItem(FiAttribute fiAttributesItem) {
    if (this.fiAttributes == null) {
      this.fiAttributes = new ArrayList<FiAttribute>();
    }
    this.fiAttributes.add(fiAttributesItem);
    return this;
  }

   /**
   * Array of FI-specific attributes
   * @return fiAttributes
  **/
  @Schema(description = "Array of FI-specific attributes")
  public List<FiAttribute> getFiAttributes() {
    return fiAttributes;
  }

  public void setFiAttributes(List<FiAttribute> fiAttributes) {
    this.fiAttributes = fiAttributes;
  }

  public Transaction links(HateoasLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @Schema(description = "")
  public HateoasLinks getLinks() {
    return links;
  }

  public void setLinks(HateoasLinks links) {
    this.links = links;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.accountId, transaction.accountId) &&
        Objects.equals(this.transactionId, transaction.transactionId) &&
        Objects.equals(this.referenceTransactionId, transaction.referenceTransactionId) &&
        Objects.equals(this.postedTimestamp, transaction.postedTimestamp) &&
        Objects.equals(this.transactionTimestamp, transaction.transactionTimestamp) &&
        Objects.equals(this.description, transaction.description) &&
        Objects.equals(this.memo, transaction.memo) &&
        Objects.equals(this.debitCreditMemo, transaction.debitCreditMemo) &&
        Objects.equals(this.category, transaction.category) &&
        Objects.equals(this.subCategory, transaction.subCategory) &&
        Objects.equals(this.reference, transaction.reference) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.foreignAmount, transaction.foreignAmount) &&
        Objects.equals(this.foreignCurrency, transaction.foreignCurrency) &&
        Objects.equals(this.imageIds, transaction.imageIds) &&
        Objects.equals(this.lineItem, transaction.lineItem) &&
        Objects.equals(this.reward, transaction.reward) &&
        Objects.equals(this.fiAttributes, transaction.fiAttributes) &&
        Objects.equals(this.links, transaction.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, transactionId, referenceTransactionId, postedTimestamp, transactionTimestamp, description, memo, debitCreditMemo, category, subCategory, reference, status, amount, foreignAmount, foreignCurrency, imageIds, lineItem, reward, fiAttributes, links);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    referenceTransactionId: ").append(toIndentedString(referenceTransactionId)).append("\n");
    sb.append("    postedTimestamp: ").append(toIndentedString(postedTimestamp)).append("\n");
    sb.append("    transactionTimestamp: ").append(toIndentedString(transactionTimestamp)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    debitCreditMemo: ").append(toIndentedString(debitCreditMemo)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    subCategory: ").append(toIndentedString(subCategory)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    foreignAmount: ").append(toIndentedString(foreignAmount)).append("\n");
    sb.append("    foreignCurrency: ").append(toIndentedString(foreignCurrency)).append("\n");
    sb.append("    imageIds: ").append(toIndentedString(imageIds)).append("\n");
    sb.append("    lineItem: ").append(toIndentedString(lineItem)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("    fiAttributes: ").append(toIndentedString(fiAttributes)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
