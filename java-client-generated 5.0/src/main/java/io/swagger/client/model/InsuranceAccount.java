/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountBillPayStatus;
import io.swagger.client.model.AccountContact;
import io.swagger.client.model.BalanceType;
import io.swagger.client.model.Bills;
import io.swagger.client.model.InsuranceTransaction;
import io.swagger.client.model.InterestRateType;
import io.swagger.client.model.PolicyStatus;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * An insurance account type and properties such as category, premium, and payment term information
 */
@Schema(description = "An insurance account type and properties such as category, premium, and payment term information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class InsuranceAccount extends Account {
  /**
   * Category of account
   */
  @JsonAdapter(AccountCategoryEnum.Adapter.class)
  public enum AccountCategoryEnum {
    DEPOSIT_ACCOUNT("DEPOSIT_ACCOUNT"),
    INVESTMENT_ACCOUNT("INVESTMENT_ACCOUNT"),
    LOAN_ACCOUNT("LOAN_ACCOUNT"),
    LOC_ACCOUNT("LOC_ACCOUNT"),
    INSURANCE_ACCOUNT("INSURANCE_ACCOUNT");

    private String value;

    AccountCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AccountCategoryEnum fromValue(String input) {
      for (AccountCategoryEnum b : AccountCategoryEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AccountCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountCategoryEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AccountCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AccountCategoryEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("accountCategory")
  private AccountCategoryEnum accountCategory = null;

  @SerializedName("policyPremium")
  private BigDecimal policyPremium = null;

  /**
   * The payment term for the premium
   */
  @JsonAdapter(PolicyPremiumTermEnum.Adapter.class)
  public enum PolicyPremiumTermEnum {
    MONTHLY("MONTHLY"),
    ANNUAL("ANNUAL");

    private String value;

    PolicyPremiumTermEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PolicyPremiumTermEnum fromValue(String input) {
      for (PolicyPremiumTermEnum b : PolicyPremiumTermEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PolicyPremiumTermEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyPremiumTermEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PolicyPremiumTermEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PolicyPremiumTermEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("policyPremiumTerm")
  private PolicyPremiumTermEnum policyPremiumTerm = null;

  @SerializedName("policyStartDate")
  private LocalDate policyStartDate = null;

  @SerializedName("policyStatus")
  private PolicyStatus policyStatus = null;

  @SerializedName("policyEndDate")
  private LocalDate policyEndDate = null;

  @SerializedName("policyCoverageAmount")
  private BigDecimal policyCoverageAmount = null;

  @SerializedName("transactions")
  private List<InsuranceTransaction> transactions = null;

  @SerializedName("bills")
  private List<Bills> bills = null;

  public InsuranceAccount accountCategory(AccountCategoryEnum accountCategory) {
    this.accountCategory = accountCategory;
    return this;
  }

   /**
   * Category of account
   * @return accountCategory
  **/
  @Schema(description = "Category of account")
  public AccountCategoryEnum getAccountCategory() {
    return accountCategory;
  }

  public void setAccountCategory(AccountCategoryEnum accountCategory) {
    this.accountCategory = accountCategory;
  }

  public InsuranceAccount policyPremium(BigDecimal policyPremium) {
    this.policyPremium = policyPremium;
    return this;
  }

   /**
   * The amount of the user&#x27;s premium
   * @return policyPremium
  **/
  @Schema(description = "The amount of the user's premium")
  public BigDecimal getPolicyPremium() {
    return policyPremium;
  }

  public void setPolicyPremium(BigDecimal policyPremium) {
    this.policyPremium = policyPremium;
  }

  public InsuranceAccount policyPremiumTerm(PolicyPremiumTermEnum policyPremiumTerm) {
    this.policyPremiumTerm = policyPremiumTerm;
    return this;
  }

   /**
   * The payment term for the premium
   * @return policyPremiumTerm
  **/
  @Schema(description = "The payment term for the premium")
  public PolicyPremiumTermEnum getPolicyPremiumTerm() {
    return policyPremiumTerm;
  }

  public void setPolicyPremiumTerm(PolicyPremiumTermEnum policyPremiumTerm) {
    this.policyPremiumTerm = policyPremiumTerm;
  }

  public InsuranceAccount policyStartDate(LocalDate policyStartDate) {
    this.policyStartDate = policyStartDate;
    return this;
  }

   /**
   * Get policyStartDate
   * @return policyStartDate
  **/
  @Schema(description = "")
  public LocalDate getPolicyStartDate() {
    return policyStartDate;
  }

  public void setPolicyStartDate(LocalDate policyStartDate) {
    this.policyStartDate = policyStartDate;
  }

  public InsuranceAccount policyStatus(PolicyStatus policyStatus) {
    this.policyStatus = policyStatus;
    return this;
  }

   /**
   * Get policyStatus
   * @return policyStatus
  **/
  @Schema(description = "")
  public PolicyStatus getPolicyStatus() {
    return policyStatus;
  }

  public void setPolicyStatus(PolicyStatus policyStatus) {
    this.policyStatus = policyStatus;
  }

  public InsuranceAccount policyEndDate(LocalDate policyEndDate) {
    this.policyEndDate = policyEndDate;
    return this;
  }

   /**
   * Get policyEndDate
   * @return policyEndDate
  **/
  @Schema(description = "")
  public LocalDate getPolicyEndDate() {
    return policyEndDate;
  }

  public void setPolicyEndDate(LocalDate policyEndDate) {
    this.policyEndDate = policyEndDate;
  }

  public InsuranceAccount policyCoverageAmount(BigDecimal policyCoverageAmount) {
    this.policyCoverageAmount = policyCoverageAmount;
    return this;
  }

   /**
   * Total amount of money the user is insured for
   * @return policyCoverageAmount
  **/
  @Schema(description = "Total amount of money the user is insured for")
  public BigDecimal getPolicyCoverageAmount() {
    return policyCoverageAmount;
  }

  public void setPolicyCoverageAmount(BigDecimal policyCoverageAmount) {
    this.policyCoverageAmount = policyCoverageAmount;
  }

  public InsuranceAccount transactions(List<InsuranceTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public InsuranceAccount addTransactionsItem(InsuranceTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<InsuranceTransaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions on the insurance account
   * @return transactions
  **/
  @Schema(description = "Transactions on the insurance account")
  public List<InsuranceTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<InsuranceTransaction> transactions) {
    this.transactions = transactions;
  }

  public InsuranceAccount bills(List<Bills> bills) {
    this.bills = bills;
    return this;
  }

  public InsuranceAccount addBillsItem(Bills billsItem) {
    if (this.bills == null) {
      this.bills = new ArrayList<Bills>();
    }
    this.bills.add(billsItem);
    return this;
  }

   /**
   * Payments due on the insurance account
   * @return bills
  **/
  @Schema(description = "Payments due on the insurance account")
  public List<Bills> getBills() {
    return bills;
  }

  public void setBills(List<Bills> bills) {
    this.bills = bills;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsuranceAccount insuranceAccount = (InsuranceAccount) o;
    return Objects.equals(this.accountCategory, insuranceAccount.accountCategory) &&
        Objects.equals(this.policyPremium, insuranceAccount.policyPremium) &&
        Objects.equals(this.policyPremiumTerm, insuranceAccount.policyPremiumTerm) &&
        Objects.equals(this.policyStartDate, insuranceAccount.policyStartDate) &&
        Objects.equals(this.policyStatus, insuranceAccount.policyStatus) &&
        Objects.equals(this.policyEndDate, insuranceAccount.policyEndDate) &&
        Objects.equals(this.policyCoverageAmount, insuranceAccount.policyCoverageAmount) &&
        Objects.equals(this.transactions, insuranceAccount.transactions) &&
        Objects.equals(this.bills, insuranceAccount.bills) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCategory, policyPremium, policyPremiumTerm, policyStartDate, policyStatus, policyEndDate, policyCoverageAmount, transactions, bills, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsuranceAccount {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    accountCategory: ").append(toIndentedString(accountCategory)).append("\n");
    sb.append("    policyPremium: ").append(toIndentedString(policyPremium)).append("\n");
    sb.append("    policyPremiumTerm: ").append(toIndentedString(policyPremiumTerm)).append("\n");
    sb.append("    policyStartDate: ").append(toIndentedString(policyStartDate)).append("\n");
    sb.append("    policyStatus: ").append(toIndentedString(policyStatus)).append("\n");
    sb.append("    policyEndDate: ").append(toIndentedString(policyEndDate)).append("\n");
    sb.append("    policyCoverageAmount: ").append(toIndentedString(policyCoverageAmount)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    bills: ").append(toIndentedString(bills)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
