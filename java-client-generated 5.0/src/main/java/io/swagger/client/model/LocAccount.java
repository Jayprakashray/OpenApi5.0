/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountBillPayStatus;
import io.swagger.client.model.AccountContact;
import io.swagger.client.model.BalanceType;
import io.swagger.client.model.CardArt;
import io.swagger.client.model.InterestRateType;
import io.swagger.client.model.LocTransaction;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * A line-of-credit account
 */
@Schema(description = "A line-of-credit account")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class LocAccount extends Account {
  @SerializedName("balanceAsOf")
  private OffsetDateTime balanceAsOf = null;

  @SerializedName("creditLine")
  private BigDecimal creditLine = null;

  @SerializedName("availableCredit")
  private BigDecimal availableCredit = null;

  @SerializedName("nextPaymentAmount")
  private BigDecimal nextPaymentAmount = null;

  @SerializedName("nextPaymentDate")
  private LocalDate nextPaymentDate = null;

  @SerializedName("principalBalance")
  private BigDecimal principalBalance = null;

  @SerializedName("currentBalance")
  private BigDecimal currentBalance = null;

  @SerializedName("minimumPaymentAmount")
  private BigDecimal minimumPaymentAmount = null;

  @SerializedName("lastPaymentAmount")
  private BigDecimal lastPaymentAmount = null;

  @SerializedName("lastPaymentDate")
  private LocalDate lastPaymentDate = null;

  @SerializedName("pastDueAmount")
  private BigDecimal pastDueAmount = null;

  @SerializedName("lastStmtBalance")
  private BigDecimal lastStmtBalance = null;

  @SerializedName("lastStmtDate")
  private LocalDate lastStmtDate = null;

  @SerializedName("purchasesApr")
  private BigDecimal purchasesApr = null;

  @SerializedName("advancesApr")
  private BigDecimal advancesApr = null;

  @SerializedName("cashAdvanceLimit")
  private BigDecimal cashAdvanceLimit = null;

  @SerializedName("availableCash")
  private BigDecimal availableCash = null;

  @SerializedName("financeCharges")
  private BigDecimal financeCharges = null;

  @SerializedName("cardNetwork")
  private String cardNetwork = null;

  @SerializedName("cardArt")
  private CardArt cardArt = null;

  @SerializedName("transactions")
  private List<LocTransaction> transactions = null;

  public LocAccount balanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @Schema(description = "")
  public OffsetDateTime getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }

  public LocAccount creditLine(BigDecimal creditLine) {
    this.creditLine = creditLine;
    return this;
  }

   /**
   * Credit limit
   * @return creditLine
  **/
  @Schema(description = "Credit limit")
  public BigDecimal getCreditLine() {
    return creditLine;
  }

  public void setCreditLine(BigDecimal creditLine) {
    this.creditLine = creditLine;
  }

  public LocAccount availableCredit(BigDecimal availableCredit) {
    this.availableCredit = availableCredit;
    return this;
  }

   /**
   * Available credit
   * @return availableCredit
  **/
  @Schema(description = "Available credit")
  public BigDecimal getAvailableCredit() {
    return availableCredit;
  }

  public void setAvailableCredit(BigDecimal availableCredit) {
    this.availableCredit = availableCredit;
  }

  public LocAccount nextPaymentAmount(BigDecimal nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
    return this;
  }

   /**
   * Amount of next payment
   * @return nextPaymentAmount
  **/
  @Schema(description = "Amount of next payment")
  public BigDecimal getNextPaymentAmount() {
    return nextPaymentAmount;
  }

  public void setNextPaymentAmount(BigDecimal nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
  }

  public LocAccount nextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
    return this;
  }

   /**
   * Get nextPaymentDate
   * @return nextPaymentDate
  **/
  @Schema(description = "")
  public LocalDate getNextPaymentDate() {
    return nextPaymentDate;
  }

  public void setNextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
  }

  public LocAccount principalBalance(BigDecimal principalBalance) {
    this.principalBalance = principalBalance;
    return this;
  }

   /**
   * Principal balance
   * @return principalBalance
  **/
  @Schema(description = "Principal balance")
  public BigDecimal getPrincipalBalance() {
    return principalBalance;
  }

  public void setPrincipalBalance(BigDecimal principalBalance) {
    this.principalBalance = principalBalance;
  }

  public LocAccount currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * Current balance of the line of credit
   * @return currentBalance
  **/
  @Schema(description = "Current balance of the line of credit")
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }

  public LocAccount minimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    this.minimumPaymentAmount = minimumPaymentAmount;
    return this;
  }

   /**
   * Minimum payment amount
   * @return minimumPaymentAmount
  **/
  @Schema(description = "Minimum payment amount")
  public BigDecimal getMinimumPaymentAmount() {
    return minimumPaymentAmount;
  }

  public void setMinimumPaymentAmount(BigDecimal minimumPaymentAmount) {
    this.minimumPaymentAmount = minimumPaymentAmount;
  }

  public LocAccount lastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * Last payment amount
   * @return lastPaymentAmount
  **/
  @Schema(description = "Last payment amount")
  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }

  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }

  public LocAccount lastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * Get lastPaymentDate
   * @return lastPaymentDate
  **/
  @Schema(description = "")
  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }

  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }

  public LocAccount pastDueAmount(BigDecimal pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
    return this;
  }

   /**
   * Past Due Amount
   * @return pastDueAmount
  **/
  @Schema(description = "Past Due Amount")
  public BigDecimal getPastDueAmount() {
    return pastDueAmount;
  }

  public void setPastDueAmount(BigDecimal pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
  }

  public LocAccount lastStmtBalance(BigDecimal lastStmtBalance) {
    this.lastStmtBalance = lastStmtBalance;
    return this;
  }

   /**
   * Last Statement Balance
   * @return lastStmtBalance
  **/
  @Schema(description = "Last Statement Balance")
  public BigDecimal getLastStmtBalance() {
    return lastStmtBalance;
  }

  public void setLastStmtBalance(BigDecimal lastStmtBalance) {
    this.lastStmtBalance = lastStmtBalance;
  }

  public LocAccount lastStmtDate(LocalDate lastStmtDate) {
    this.lastStmtDate = lastStmtDate;
    return this;
  }

   /**
   * Get lastStmtDate
   * @return lastStmtDate
  **/
  @Schema(description = "")
  public LocalDate getLastStmtDate() {
    return lastStmtDate;
  }

  public void setLastStmtDate(LocalDate lastStmtDate) {
    this.lastStmtDate = lastStmtDate;
  }

  public LocAccount purchasesApr(BigDecimal purchasesApr) {
    this.purchasesApr = purchasesApr;
    return this;
  }

   /**
   * Purchases APR
   * @return purchasesApr
  **/
  @Schema(description = "Purchases APR")
  public BigDecimal getPurchasesApr() {
    return purchasesApr;
  }

  public void setPurchasesApr(BigDecimal purchasesApr) {
    this.purchasesApr = purchasesApr;
  }

  public LocAccount advancesApr(BigDecimal advancesApr) {
    this.advancesApr = advancesApr;
    return this;
  }

   /**
   * Advances APR
   * @return advancesApr
  **/
  @Schema(description = "Advances APR")
  public BigDecimal getAdvancesApr() {
    return advancesApr;
  }

  public void setAdvancesApr(BigDecimal advancesApr) {
    this.advancesApr = advancesApr;
  }

  public LocAccount cashAdvanceLimit(BigDecimal cashAdvanceLimit) {
    this.cashAdvanceLimit = cashAdvanceLimit;
    return this;
  }

   /**
   * Cash advance limit
   * @return cashAdvanceLimit
  **/
  @Schema(description = "Cash advance limit")
  public BigDecimal getCashAdvanceLimit() {
    return cashAdvanceLimit;
  }

  public void setCashAdvanceLimit(BigDecimal cashAdvanceLimit) {
    this.cashAdvanceLimit = cashAdvanceLimit;
  }

  public LocAccount availableCash(BigDecimal availableCash) {
    this.availableCash = availableCash;
    return this;
  }

   /**
   * Available cash
   * @return availableCash
  **/
  @Schema(description = "Available cash")
  public BigDecimal getAvailableCash() {
    return availableCash;
  }

  public void setAvailableCash(BigDecimal availableCash) {
    this.availableCash = availableCash;
  }

  public LocAccount financeCharges(BigDecimal financeCharges) {
    this.financeCharges = financeCharges;
    return this;
  }

   /**
   * Finance charges
   * @return financeCharges
  **/
  @Schema(description = "Finance charges")
  public BigDecimal getFinanceCharges() {
    return financeCharges;
  }

  public void setFinanceCharges(BigDecimal financeCharges) {
    this.financeCharges = financeCharges;
  }

  public LocAccount cardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
    return this;
  }

   /**
   * Card network, e.g. \&quot;VISA\&quot;, \&quot;MASTERCARD\&quot;, \&quot;AMERICAN_EXPRESS\&quot;, \&quot;DISCOVER\&quot;, \&quot;INTERLINK\&quot;, \&quot;STAR\&quot; etc.
   * @return cardNetwork
  **/
  @Schema(description = "Card network, e.g. \"VISA\", \"MASTERCARD\", \"AMERICAN_EXPRESS\", \"DISCOVER\", \"INTERLINK\", \"STAR\" etc.")
  public String getCardNetwork() {
    return cardNetwork;
  }

  public void setCardNetwork(String cardNetwork) {
    this.cardNetwork = cardNetwork;
  }

  public LocAccount cardArt(CardArt cardArt) {
    this.cardArt = cardArt;
    return this;
  }

   /**
   * Get cardArt
   * @return cardArt
  **/
  @Schema(description = "")
  public CardArt getCardArt() {
    return cardArt;
  }

  public void setCardArt(CardArt cardArt) {
    this.cardArt = cardArt;
  }

  public LocAccount transactions(List<LocTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public LocAccount addTransactionsItem(LocTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<LocTransaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions on the line-of-credit account
   * @return transactions
  **/
  @Schema(description = "Transactions on the line-of-credit account")
  public List<LocTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<LocTransaction> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocAccount locAccount = (LocAccount) o;
    return Objects.equals(this.balanceAsOf, locAccount.balanceAsOf) &&
        Objects.equals(this.creditLine, locAccount.creditLine) &&
        Objects.equals(this.availableCredit, locAccount.availableCredit) &&
        Objects.equals(this.nextPaymentAmount, locAccount.nextPaymentAmount) &&
        Objects.equals(this.nextPaymentDate, locAccount.nextPaymentDate) &&
        Objects.equals(this.principalBalance, locAccount.principalBalance) &&
        Objects.equals(this.currentBalance, locAccount.currentBalance) &&
        Objects.equals(this.minimumPaymentAmount, locAccount.minimumPaymentAmount) &&
        Objects.equals(this.lastPaymentAmount, locAccount.lastPaymentAmount) &&
        Objects.equals(this.lastPaymentDate, locAccount.lastPaymentDate) &&
        Objects.equals(this.pastDueAmount, locAccount.pastDueAmount) &&
        Objects.equals(this.lastStmtBalance, locAccount.lastStmtBalance) &&
        Objects.equals(this.lastStmtDate, locAccount.lastStmtDate) &&
        Objects.equals(this.purchasesApr, locAccount.purchasesApr) &&
        Objects.equals(this.advancesApr, locAccount.advancesApr) &&
        Objects.equals(this.cashAdvanceLimit, locAccount.cashAdvanceLimit) &&
        Objects.equals(this.availableCash, locAccount.availableCash) &&
        Objects.equals(this.financeCharges, locAccount.financeCharges) &&
        Objects.equals(this.cardNetwork, locAccount.cardNetwork) &&
        Objects.equals(this.cardArt, locAccount.cardArt) &&
        Objects.equals(this.transactions, locAccount.transactions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceAsOf, creditLine, availableCredit, nextPaymentAmount, nextPaymentDate, principalBalance, currentBalance, minimumPaymentAmount, lastPaymentAmount, lastPaymentDate, pastDueAmount, lastStmtBalance, lastStmtDate, purchasesApr, advancesApr, cashAdvanceLimit, availableCash, financeCharges, cardNetwork, cardArt, transactions, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocAccount {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    creditLine: ").append(toIndentedString(creditLine)).append("\n");
    sb.append("    availableCredit: ").append(toIndentedString(availableCredit)).append("\n");
    sb.append("    nextPaymentAmount: ").append(toIndentedString(nextPaymentAmount)).append("\n");
    sb.append("    nextPaymentDate: ").append(toIndentedString(nextPaymentDate)).append("\n");
    sb.append("    principalBalance: ").append(toIndentedString(principalBalance)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    minimumPaymentAmount: ").append(toIndentedString(minimumPaymentAmount)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    pastDueAmount: ").append(toIndentedString(pastDueAmount)).append("\n");
    sb.append("    lastStmtBalance: ").append(toIndentedString(lastStmtBalance)).append("\n");
    sb.append("    lastStmtDate: ").append(toIndentedString(lastStmtDate)).append("\n");
    sb.append("    purchasesApr: ").append(toIndentedString(purchasesApr)).append("\n");
    sb.append("    advancesApr: ").append(toIndentedString(advancesApr)).append("\n");
    sb.append("    cashAdvanceLimit: ").append(toIndentedString(cashAdvanceLimit)).append("\n");
    sb.append("    availableCash: ").append(toIndentedString(availableCash)).append("\n");
    sb.append("    financeCharges: ").append(toIndentedString(financeCharges)).append("\n");
    sb.append("    cardNetwork: ").append(toIndentedString(cardNetwork)).append("\n");
    sb.append("    cardArt: ").append(toIndentedString(cardArt)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
