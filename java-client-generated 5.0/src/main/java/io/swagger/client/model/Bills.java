/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import org.threeten.bp.LocalDate;
/**
 * The payments due on an account
 */
@Schema(description = "The payments due on an account")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class Bills {
  @SerializedName("totalPaymentDue")
  private BigDecimal totalPaymentDue = null;

  @SerializedName("minimumPaymentDue")
  private BigDecimal minimumPaymentDue = null;

  @SerializedName("dueDate")
  private LocalDate dueDate = null;

  @SerializedName("autoPayEnabled")
  private Boolean autoPayEnabled = null;

  @SerializedName("autoPayAmount")
  private BigDecimal autoPayAmount = null;

  @SerializedName("autoPayDate")
  private LocalDate autoPayDate = null;

  @SerializedName("pastDueAmount")
  private BigDecimal pastDueAmount = null;

  @SerializedName("lastPaymentAmount")
  private BigDecimal lastPaymentAmount = null;

  @SerializedName("lastPaymentDate")
  private LocalDate lastPaymentDate = null;

  @SerializedName("statementBalance")
  private BigDecimal statementBalance = null;

  @SerializedName("statementDate")
  private LocalDate statementDate = null;

  public Bills totalPaymentDue(BigDecimal totalPaymentDue) {
    this.totalPaymentDue = totalPaymentDue;
    return this;
  }

   /**
   * Total payment due or next payment due.  Monthly payment due for loans
   * @return totalPaymentDue
  **/
  @Schema(description = "Total payment due or next payment due.  Monthly payment due for loans")
  public BigDecimal getTotalPaymentDue() {
    return totalPaymentDue;
  }

  public void setTotalPaymentDue(BigDecimal totalPaymentDue) {
    this.totalPaymentDue = totalPaymentDue;
  }

  public Bills minimumPaymentDue(BigDecimal minimumPaymentDue) {
    this.minimumPaymentDue = minimumPaymentDue;
    return this;
  }

   /**
   * The minimum amount which is due
   * @return minimumPaymentDue
  **/
  @Schema(description = "The minimum amount which is due")
  public BigDecimal getMinimumPaymentDue() {
    return minimumPaymentDue;
  }

  public void setMinimumPaymentDue(BigDecimal minimumPaymentDue) {
    this.minimumPaymentDue = minimumPaymentDue;
  }

  public Bills dueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @Schema(description = "")
  public LocalDate getDueDate() {
    return dueDate;
  }

  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }

  public Bills autoPayEnabled(Boolean autoPayEnabled) {
    this.autoPayEnabled = autoPayEnabled;
    return this;
  }

   /**
   * Whether the user&#x27;s bill is paid automatically
   * @return autoPayEnabled
  **/
  @Schema(description = "Whether the user's bill is paid automatically")
  public Boolean isAutoPayEnabled() {
    return autoPayEnabled;
  }

  public void setAutoPayEnabled(Boolean autoPayEnabled) {
    this.autoPayEnabled = autoPayEnabled;
  }

  public Bills autoPayAmount(BigDecimal autoPayAmount) {
    this.autoPayAmount = autoPayAmount;
    return this;
  }

   /**
   * The amount of money the user has set to autopay this bill
   * @return autoPayAmount
  **/
  @Schema(description = "The amount of money the user has set to autopay this bill")
  public BigDecimal getAutoPayAmount() {
    return autoPayAmount;
  }

  public void setAutoPayAmount(BigDecimal autoPayAmount) {
    this.autoPayAmount = autoPayAmount;
  }

  public Bills autoPayDate(LocalDate autoPayDate) {
    this.autoPayDate = autoPayDate;
    return this;
  }

   /**
   * Get autoPayDate
   * @return autoPayDate
  **/
  @Schema(description = "")
  public LocalDate getAutoPayDate() {
    return autoPayDate;
  }

  public void setAutoPayDate(LocalDate autoPayDate) {
    this.autoPayDate = autoPayDate;
  }

  public Bills pastDueAmount(BigDecimal pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
    return this;
  }

   /**
   * The amount that the user should have already paid. The value is negative if user owes money
   * @return pastDueAmount
  **/
  @Schema(description = "The amount that the user should have already paid. The value is negative if user owes money")
  public BigDecimal getPastDueAmount() {
    return pastDueAmount;
  }

  public void setPastDueAmount(BigDecimal pastDueAmount) {
    this.pastDueAmount = pastDueAmount;
  }

  public Bills lastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * The amount of the most recent payment
   * @return lastPaymentAmount
  **/
  @Schema(description = "The amount of the most recent payment")
  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }

  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }

  public Bills lastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * Get lastPaymentDate
   * @return lastPaymentDate
  **/
  @Schema(description = "")
  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }

  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }

  public Bills statementBalance(BigDecimal statementBalance) {
    this.statementBalance = statementBalance;
    return this;
  }

   /**
   * The amount of the last statement.  The value is negative if the user owes money
   * @return statementBalance
  **/
  @Schema(description = "The amount of the last statement.  The value is negative if the user owes money")
  public BigDecimal getStatementBalance() {
    return statementBalance;
  }

  public void setStatementBalance(BigDecimal statementBalance) {
    this.statementBalance = statementBalance;
  }

  public Bills statementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
    return this;
  }

   /**
   * Get statementDate
   * @return statementDate
  **/
  @Schema(description = "")
  public LocalDate getStatementDate() {
    return statementDate;
  }

  public void setStatementDate(LocalDate statementDate) {
    this.statementDate = statementDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bills bills = (Bills) o;
    return Objects.equals(this.totalPaymentDue, bills.totalPaymentDue) &&
        Objects.equals(this.minimumPaymentDue, bills.minimumPaymentDue) &&
        Objects.equals(this.dueDate, bills.dueDate) &&
        Objects.equals(this.autoPayEnabled, bills.autoPayEnabled) &&
        Objects.equals(this.autoPayAmount, bills.autoPayAmount) &&
        Objects.equals(this.autoPayDate, bills.autoPayDate) &&
        Objects.equals(this.pastDueAmount, bills.pastDueAmount) &&
        Objects.equals(this.lastPaymentAmount, bills.lastPaymentAmount) &&
        Objects.equals(this.lastPaymentDate, bills.lastPaymentDate) &&
        Objects.equals(this.statementBalance, bills.statementBalance) &&
        Objects.equals(this.statementDate, bills.statementDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalPaymentDue, minimumPaymentDue, dueDate, autoPayEnabled, autoPayAmount, autoPayDate, pastDueAmount, lastPaymentAmount, lastPaymentDate, statementBalance, statementDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bills {\n");
    
    sb.append("    totalPaymentDue: ").append(toIndentedString(totalPaymentDue)).append("\n");
    sb.append("    minimumPaymentDue: ").append(toIndentedString(minimumPaymentDue)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    autoPayEnabled: ").append(toIndentedString(autoPayEnabled)).append("\n");
    sb.append("    autoPayAmount: ").append(toIndentedString(autoPayAmount)).append("\n");
    sb.append("    autoPayDate: ").append(toIndentedString(autoPayDate)).append("\n");
    sb.append("    pastDueAmount: ").append(toIndentedString(pastDueAmount)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    statementBalance: ").append(toIndentedString(statementBalance)).append("\n");
    sb.append("    statementDate: ").append(toIndentedString(statementDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
