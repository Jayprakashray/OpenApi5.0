/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.DebitCreditMemo;
import io.swagger.client.model.FiAttribute;
import io.swagger.client.model.HateoasLinks;
import io.swagger.client.model.IncomeType;
import io.swagger.client.model.Inv401kSourceType;
import io.swagger.client.model.InvestmentTransactionType;
import io.swagger.client.model.Iso4217Code;
import io.swagger.client.model.LineItem;
import io.swagger.client.model.PositionType;
import io.swagger.client.model.SecurityIdType;
import io.swagger.client.model.SecurityType;
import io.swagger.client.model.SubAccountType;
import io.swagger.client.model.Transaction;
import io.swagger.client.model.TransactionReason;
import io.swagger.client.model.TransactionReward;
import io.swagger.client.model.TransactionStatus;
import io.swagger.client.model.UnitType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * Specific transaction information
 */
@Schema(description = "Specific transaction information")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class InvestmentTransaction extends Transaction {
  @SerializedName("transactionType")
  private InvestmentTransactionType transactionType = null;

  @SerializedName("shares")
  private BigDecimal shares = null;

  @SerializedName("faceValue")
  private BigDecimal faceValue = null;

  @SerializedName("price")
  private BigDecimal price = null;

  @SerializedName("securityId")
  private String securityId = null;

  @SerializedName("securityIdType")
  private SecurityIdType securityIdType = null;

  @SerializedName("securityType")
  private SecurityType securityType = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("markup")
  private BigDecimal markup = null;

  @SerializedName("commission")
  private BigDecimal commission = null;

  @SerializedName("taxes")
  private BigDecimal taxes = null;

  @SerializedName("fees")
  private BigDecimal fees = null;

  @SerializedName("load")
  private BigDecimal load = null;

  @SerializedName("inv401kSource")
  private Inv401kSourceType inv401kSource = null;

  @SerializedName("confirmationNumber")
  private String confirmationNumber = null;

  @SerializedName("fractionalCash")
  private BigDecimal fractionalCash = null;

  @SerializedName("incomeType")
  private IncomeType incomeType = null;

  @SerializedName("oldUnits")
  private BigDecimal oldUnits = null;

  @SerializedName("splitRatioNumerator")
  private BigDecimal splitRatioNumerator = null;

  @SerializedName("splitRatioDenominator")
  private BigDecimal splitRatioDenominator = null;

  @SerializedName("newUnits")
  private BigDecimal newUnits = null;

  @SerializedName("subAccountSec")
  private SubAccountType subAccountSec = null;

  @SerializedName("subAccountFund")
  private SubAccountType subAccountFund = null;

  @SerializedName("loanId")
  private String loanId = null;

  @SerializedName("loanPrincipal")
  private BigDecimal loanPrincipal = null;

  @SerializedName("loanInterest")
  private BigDecimal loanInterest = null;

  @SerializedName("payrollDate")
  private LocalDate payrollDate = null;

  @SerializedName("priorYearContrib")
  private Boolean priorYearContrib = null;

  @SerializedName("withholding")
  private BigDecimal withholding = null;

  @SerializedName("taxExempt")
  private Boolean taxExempt = null;

  @SerializedName("gain")
  private BigDecimal gain = null;

  @SerializedName("stateWithholding")
  private BigDecimal stateWithholding = null;

  @SerializedName("penalty")
  private BigDecimal penalty = null;

  @SerializedName("runningBalance")
  private BigDecimal runningBalance = null;

  @SerializedName("unitPrice")
  private BigDecimal unitPrice = null;

  @SerializedName("units")
  private BigDecimal units = null;

  @SerializedName("unitType")
  private UnitType unitType = null;

  @SerializedName("transactionReason")
  private TransactionReason transactionReason = null;

  @SerializedName("accruedInterest")
  private BigDecimal accruedInterest = null;

  /**
   * Transfer direction
   */
  @JsonAdapter(TransferActionEnum.Adapter.class)
  public enum TransferActionEnum {
    IN("IN"),
    OUT("OUT");

    private String value;

    TransferActionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransferActionEnum fromValue(String input) {
      for (TransferActionEnum b : TransferActionEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransferActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransferActionEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TransferActionEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TransferActionEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("transferAction")
  private TransferActionEnum transferAction = null;

  @SerializedName("positionType")
  private PositionType positionType = null;

  public InvestmentTransaction transactionType(InvestmentTransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @Schema(description = "")
  public InvestmentTransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(InvestmentTransactionType transactionType) {
    this.transactionType = transactionType;
  }

  public InvestmentTransaction shares(BigDecimal shares) {
    this.shares = shares;
    return this;
  }

   /**
   * Required for stock, mutual funds. Number of shares (with decimals). Negative numbers indicate securities are being removed from the account
   * @return shares
  **/
  @Schema(description = "Required for stock, mutual funds. Number of shares (with decimals). Negative numbers indicate securities are being removed from the account")
  public BigDecimal getShares() {
    return shares;
  }

  public void setShares(BigDecimal shares) {
    this.shares = shares;
  }

  public InvestmentTransaction faceValue(BigDecimal faceValue) {
    this.faceValue = faceValue;
    return this;
  }

   /**
   * Cash value for bonds
   * @return faceValue
  **/
  @Schema(description = "Cash value for bonds")
  public BigDecimal getFaceValue() {
    return faceValue;
  }

  public void setFaceValue(BigDecimal faceValue) {
    this.faceValue = faceValue;
  }

  public InvestmentTransaction price(BigDecimal price) {
    this.price = price;
    return this;
  }

   /**
   * Unit purchase price
   * @return price
  **/
  @Schema(description = "Unit purchase price")
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  public InvestmentTransaction securityId(String securityId) {
    this.securityId = securityId;
    return this;
  }

   /**
   * Unique identifier of security
   * @return securityId
  **/
  @Schema(description = "Unique identifier of security")
  public String getSecurityId() {
    return securityId;
  }

  public void setSecurityId(String securityId) {
    this.securityId = securityId;
  }

  public InvestmentTransaction securityIdType(SecurityIdType securityIdType) {
    this.securityIdType = securityIdType;
    return this;
  }

   /**
   * Get securityIdType
   * @return securityIdType
  **/
  @Schema(description = "")
  public SecurityIdType getSecurityIdType() {
    return securityIdType;
  }

  public void setSecurityIdType(SecurityIdType securityIdType) {
    this.securityIdType = securityIdType;
  }

  public InvestmentTransaction securityType(SecurityType securityType) {
    this.securityType = securityType;
    return this;
  }

   /**
   * Get securityType
   * @return securityType
  **/
  @Schema(description = "")
  public SecurityType getSecurityType() {
    return securityType;
  }

  public void setSecurityType(SecurityType securityType) {
    this.securityType = securityType;
  }

  public InvestmentTransaction symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Ticker symbol
   * @return symbol
  **/
  @Schema(description = "Ticker symbol")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public InvestmentTransaction markup(BigDecimal markup) {
    this.markup = markup;
    return this;
  }

   /**
   * Portion of unit price that is attributed to the dealer markup
   * @return markup
  **/
  @Schema(description = "Portion of unit price that is attributed to the dealer markup")
  public BigDecimal getMarkup() {
    return markup;
  }

  public void setMarkup(BigDecimal markup) {
    this.markup = markup;
  }

  public InvestmentTransaction commission(BigDecimal commission) {
    this.commission = commission;
    return this;
  }

   /**
   * Transaction commission
   * @return commission
  **/
  @Schema(description = "Transaction commission")
  public BigDecimal getCommission() {
    return commission;
  }

  public void setCommission(BigDecimal commission) {
    this.commission = commission;
  }

  public InvestmentTransaction taxes(BigDecimal taxes) {
    this.taxes = taxes;
    return this;
  }

   /**
   * Taxes on the trade
   * @return taxes
  **/
  @Schema(description = "Taxes on the trade")
  public BigDecimal getTaxes() {
    return taxes;
  }

  public void setTaxes(BigDecimal taxes) {
    this.taxes = taxes;
  }

  public InvestmentTransaction fees(BigDecimal fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Fees applied to the trade
   * @return fees
  **/
  @Schema(description = "Fees applied to the trade")
  public BigDecimal getFees() {
    return fees;
  }

  public void setFees(BigDecimal fees) {
    this.fees = fees;
  }

  public InvestmentTransaction load(BigDecimal load) {
    this.load = load;
    return this;
  }

   /**
   * Load on the transaction
   * @return load
  **/
  @Schema(description = "Load on the transaction")
  public BigDecimal getLoad() {
    return load;
  }

  public void setLoad(BigDecimal load) {
    this.load = load;
  }

  public InvestmentTransaction inv401kSource(Inv401kSourceType inv401kSource) {
    this.inv401kSource = inv401kSource;
    return this;
  }

   /**
   * Get inv401kSource
   * @return inv401kSource
  **/
  @Schema(description = "")
  public Inv401kSourceType getInv401kSource() {
    return inv401kSource;
  }

  public void setInv401kSource(Inv401kSourceType inv401kSource) {
    this.inv401kSource = inv401kSource;
  }

  public InvestmentTransaction confirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
    return this;
  }

   /**
   * Confirmation number of the transaction
   * @return confirmationNumber
  **/
  @Schema(description = "Confirmation number of the transaction")
  public String getConfirmationNumber() {
    return confirmationNumber;
  }

  public void setConfirmationNumber(String confirmationNumber) {
    this.confirmationNumber = confirmationNumber;
  }

  public InvestmentTransaction fractionalCash(BigDecimal fractionalCash) {
    this.fractionalCash = fractionalCash;
    return this;
  }

   /**
   * Cash for fractional units (used for stock splits)
   * @return fractionalCash
  **/
  @Schema(description = "Cash for fractional units (used for stock splits)")
  public BigDecimal getFractionalCash() {
    return fractionalCash;
  }

  public void setFractionalCash(BigDecimal fractionalCash) {
    this.fractionalCash = fractionalCash;
  }

  public InvestmentTransaction incomeType(IncomeType incomeType) {
    this.incomeType = incomeType;
    return this;
  }

   /**
   * Get incomeType
   * @return incomeType
  **/
  @Schema(description = "")
  public IncomeType getIncomeType() {
    return incomeType;
  }

  public void setIncomeType(IncomeType incomeType) {
    this.incomeType = incomeType;
  }

  public InvestmentTransaction oldUnits(BigDecimal oldUnits) {
    this.oldUnits = oldUnits;
    return this;
  }

   /**
   * Number of shares before split
   * @return oldUnits
  **/
  @Schema(description = "Number of shares before split")
  public BigDecimal getOldUnits() {
    return oldUnits;
  }

  public void setOldUnits(BigDecimal oldUnits) {
    this.oldUnits = oldUnits;
  }

  public InvestmentTransaction splitRatioNumerator(BigDecimal splitRatioNumerator) {
    this.splitRatioNumerator = splitRatioNumerator;
    return this;
  }

   /**
   * Split ratio numerator
   * @return splitRatioNumerator
  **/
  @Schema(description = "Split ratio numerator")
  public BigDecimal getSplitRatioNumerator() {
    return splitRatioNumerator;
  }

  public void setSplitRatioNumerator(BigDecimal splitRatioNumerator) {
    this.splitRatioNumerator = splitRatioNumerator;
  }

  public InvestmentTransaction splitRatioDenominator(BigDecimal splitRatioDenominator) {
    this.splitRatioDenominator = splitRatioDenominator;
    return this;
  }

   /**
   * Split ratio denominator
   * @return splitRatioDenominator
  **/
  @Schema(description = "Split ratio denominator")
  public BigDecimal getSplitRatioDenominator() {
    return splitRatioDenominator;
  }

  public void setSplitRatioDenominator(BigDecimal splitRatioDenominator) {
    this.splitRatioDenominator = splitRatioDenominator;
  }

  public InvestmentTransaction newUnits(BigDecimal newUnits) {
    this.newUnits = newUnits;
    return this;
  }

   /**
   * Number of shares after split
   * @return newUnits
  **/
  @Schema(description = "Number of shares after split")
  public BigDecimal getNewUnits() {
    return newUnits;
  }

  public void setNewUnits(BigDecimal newUnits) {
    this.newUnits = newUnits;
  }

  public InvestmentTransaction subAccountSec(SubAccountType subAccountSec) {
    this.subAccountSec = subAccountSec;
    return this;
  }

   /**
   * Get subAccountSec
   * @return subAccountSec
  **/
  @Schema(description = "")
  public SubAccountType getSubAccountSec() {
    return subAccountSec;
  }

  public void setSubAccountSec(SubAccountType subAccountSec) {
    this.subAccountSec = subAccountSec;
  }

  public InvestmentTransaction subAccountFund(SubAccountType subAccountFund) {
    this.subAccountFund = subAccountFund;
    return this;
  }

   /**
   * Get subAccountFund
   * @return subAccountFund
  **/
  @Schema(description = "")
  public SubAccountType getSubAccountFund() {
    return subAccountFund;
  }

  public void setSubAccountFund(SubAccountType subAccountFund) {
    this.subAccountFund = subAccountFund;
  }

  public InvestmentTransaction loanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

   /**
   * For 401k accounts only. This indicates the transaction was due to a loan or a loan repayment
   * @return loanId
  **/
  @Schema(description = "For 401k accounts only. This indicates the transaction was due to a loan or a loan repayment")
  public String getLoanId() {
    return loanId;
  }

  public void setLoanId(String loanId) {
    this.loanId = loanId;
  }

  public InvestmentTransaction loanPrincipal(BigDecimal loanPrincipal) {
    this.loanPrincipal = loanPrincipal;
    return this;
  }

   /**
   * How much loan pre-payment is principal
   * @return loanPrincipal
  **/
  @Schema(description = "How much loan pre-payment is principal")
  public BigDecimal getLoanPrincipal() {
    return loanPrincipal;
  }

  public void setLoanPrincipal(BigDecimal loanPrincipal) {
    this.loanPrincipal = loanPrincipal;
  }

  public InvestmentTransaction loanInterest(BigDecimal loanInterest) {
    this.loanInterest = loanInterest;
    return this;
  }

   /**
   * How much loan pre-payment is interest
   * @return loanInterest
  **/
  @Schema(description = "How much loan pre-payment is interest")
  public BigDecimal getLoanInterest() {
    return loanInterest;
  }

  public void setLoanInterest(BigDecimal loanInterest) {
    this.loanInterest = loanInterest;
  }

  public InvestmentTransaction payrollDate(LocalDate payrollDate) {
    this.payrollDate = payrollDate;
    return this;
  }

   /**
   * Get payrollDate
   * @return payrollDate
  **/
  @Schema(description = "")
  public LocalDate getPayrollDate() {
    return payrollDate;
  }

  public void setPayrollDate(LocalDate payrollDate) {
    this.payrollDate = payrollDate;
  }

  public InvestmentTransaction priorYearContrib(Boolean priorYearContrib) {
    this.priorYearContrib = priorYearContrib;
    return this;
  }

   /**
   * Indicates this buy was made using prior year&#x27;s contribution
   * @return priorYearContrib
  **/
  @Schema(description = "Indicates this buy was made using prior year's contribution")
  public Boolean isPriorYearContrib() {
    return priorYearContrib;
  }

  public void setPriorYearContrib(Boolean priorYearContrib) {
    this.priorYearContrib = priorYearContrib;
  }

  public InvestmentTransaction withholding(BigDecimal withholding) {
    this.withholding = withholding;
    return this;
  }

   /**
   * Federal tax withholding
   * @return withholding
  **/
  @Schema(description = "Federal tax withholding")
  public BigDecimal getWithholding() {
    return withholding;
  }

  public void setWithholding(BigDecimal withholding) {
    this.withholding = withholding;
  }

  public InvestmentTransaction taxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
    return this;
  }

   /**
   * Tax-exempt transaction
   * @return taxExempt
  **/
  @Schema(description = "Tax-exempt transaction")
  public Boolean isTaxExempt() {
    return taxExempt;
  }

  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }

  public InvestmentTransaction gain(BigDecimal gain) {
    this.gain = gain;
    return this;
  }

   /**
   * For sales
   * @return gain
  **/
  @Schema(description = "For sales")
  public BigDecimal getGain() {
    return gain;
  }

  public void setGain(BigDecimal gain) {
    this.gain = gain;
  }

  public InvestmentTransaction stateWithholding(BigDecimal stateWithholding) {
    this.stateWithholding = stateWithholding;
    return this;
  }

   /**
   * State tax withholding
   * @return stateWithholding
  **/
  @Schema(description = "State tax withholding")
  public BigDecimal getStateWithholding() {
    return stateWithholding;
  }

  public void setStateWithholding(BigDecimal stateWithholding) {
    this.stateWithholding = stateWithholding;
  }

  public InvestmentTransaction penalty(BigDecimal penalty) {
    this.penalty = penalty;
    return this;
  }

   /**
   * Indicates amount withheld due to a penalty
   * @return penalty
  **/
  @Schema(description = "Indicates amount withheld due to a penalty")
  public BigDecimal getPenalty() {
    return penalty;
  }

  public void setPenalty(BigDecimal penalty) {
    this.penalty = penalty;
  }

  public InvestmentTransaction runningBalance(BigDecimal runningBalance) {
    this.runningBalance = runningBalance;
    return this;
  }

   /**
   * Running balance of the position
   * @return runningBalance
  **/
  @Schema(description = "Running balance of the position")
  public BigDecimal getRunningBalance() {
    return runningBalance;
  }

  public void setRunningBalance(BigDecimal runningBalance) {
    this.runningBalance = runningBalance;
  }

  public InvestmentTransaction unitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Price per commonly-quoted unit. Does not include markup/markdown, unitprice. Share price for stocks, mutual funds, and others. Percentage of par for bonds. Per share (not contract) for options
   * @return unitPrice
  **/
  @Schema(description = "Price per commonly-quoted unit. Does not include markup/markdown, unitprice. Share price for stocks, mutual funds, and others. Percentage of par for bonds. Per share (not contract) for options")
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }

  public InvestmentTransaction units(BigDecimal units) {
    this.units = units;
    return this;
  }

   /**
   * For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options
   * @return units
  **/
  @Schema(description = "For security-based actions other than stock splits, quantity. Shares for stocks, mutual funds, and others. Face value for bonds. Contracts for options")
  public BigDecimal getUnits() {
    return units;
  }

  public void setUnits(BigDecimal units) {
    this.units = units;
  }

  public InvestmentTransaction unitType(UnitType unitType) {
    this.unitType = unitType;
    return this;
  }

   /**
   * Get unitType
   * @return unitType
  **/
  @Schema(description = "")
  public UnitType getUnitType() {
    return unitType;
  }

  public void setUnitType(UnitType unitType) {
    this.unitType = unitType;
  }

  public InvestmentTransaction transactionReason(TransactionReason transactionReason) {
    this.transactionReason = transactionReason;
    return this;
  }

   /**
   * Get transactionReason
   * @return transactionReason
  **/
  @Schema(description = "")
  public TransactionReason getTransactionReason() {
    return transactionReason;
  }

  public void setTransactionReason(TransactionReason transactionReason) {
    this.transactionReason = transactionReason;
  }

  public InvestmentTransaction accruedInterest(BigDecimal accruedInterest) {
    this.accruedInterest = accruedInterest;
    return this;
  }

   /**
   * Accrued interest
   * @return accruedInterest
  **/
  @Schema(description = "Accrued interest")
  public BigDecimal getAccruedInterest() {
    return accruedInterest;
  }

  public void setAccruedInterest(BigDecimal accruedInterest) {
    this.accruedInterest = accruedInterest;
  }

  public InvestmentTransaction transferAction(TransferActionEnum transferAction) {
    this.transferAction = transferAction;
    return this;
  }

   /**
   * Transfer direction
   * @return transferAction
  **/
  @Schema(description = "Transfer direction")
  public TransferActionEnum getTransferAction() {
    return transferAction;
  }

  public void setTransferAction(TransferActionEnum transferAction) {
    this.transferAction = transferAction;
  }

  public InvestmentTransaction positionType(PositionType positionType) {
    this.positionType = positionType;
    return this;
  }

   /**
   * Get positionType
   * @return positionType
  **/
  @Schema(description = "")
  public PositionType getPositionType() {
    return positionType;
  }

  public void setPositionType(PositionType positionType) {
    this.positionType = positionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvestmentTransaction investmentTransaction = (InvestmentTransaction) o;
    return Objects.equals(this.transactionType, investmentTransaction.transactionType) &&
        Objects.equals(this.shares, investmentTransaction.shares) &&
        Objects.equals(this.faceValue, investmentTransaction.faceValue) &&
        Objects.equals(this.price, investmentTransaction.price) &&
        Objects.equals(this.securityId, investmentTransaction.securityId) &&
        Objects.equals(this.securityIdType, investmentTransaction.securityIdType) &&
        Objects.equals(this.securityType, investmentTransaction.securityType) &&
        Objects.equals(this.symbol, investmentTransaction.symbol) &&
        Objects.equals(this.markup, investmentTransaction.markup) &&
        Objects.equals(this.commission, investmentTransaction.commission) &&
        Objects.equals(this.taxes, investmentTransaction.taxes) &&
        Objects.equals(this.fees, investmentTransaction.fees) &&
        Objects.equals(this.load, investmentTransaction.load) &&
        Objects.equals(this.inv401kSource, investmentTransaction.inv401kSource) &&
        Objects.equals(this.confirmationNumber, investmentTransaction.confirmationNumber) &&
        Objects.equals(this.fractionalCash, investmentTransaction.fractionalCash) &&
        Objects.equals(this.incomeType, investmentTransaction.incomeType) &&
        Objects.equals(this.oldUnits, investmentTransaction.oldUnits) &&
        Objects.equals(this.splitRatioNumerator, investmentTransaction.splitRatioNumerator) &&
        Objects.equals(this.splitRatioDenominator, investmentTransaction.splitRatioDenominator) &&
        Objects.equals(this.newUnits, investmentTransaction.newUnits) &&
        Objects.equals(this.subAccountSec, investmentTransaction.subAccountSec) &&
        Objects.equals(this.subAccountFund, investmentTransaction.subAccountFund) &&
        Objects.equals(this.loanId, investmentTransaction.loanId) &&
        Objects.equals(this.loanPrincipal, investmentTransaction.loanPrincipal) &&
        Objects.equals(this.loanInterest, investmentTransaction.loanInterest) &&
        Objects.equals(this.payrollDate, investmentTransaction.payrollDate) &&
        Objects.equals(this.priorYearContrib, investmentTransaction.priorYearContrib) &&
        Objects.equals(this.withholding, investmentTransaction.withholding) &&
        Objects.equals(this.taxExempt, investmentTransaction.taxExempt) &&
        Objects.equals(this.gain, investmentTransaction.gain) &&
        Objects.equals(this.stateWithholding, investmentTransaction.stateWithholding) &&
        Objects.equals(this.penalty, investmentTransaction.penalty) &&
        Objects.equals(this.runningBalance, investmentTransaction.runningBalance) &&
        Objects.equals(this.unitPrice, investmentTransaction.unitPrice) &&
        Objects.equals(this.units, investmentTransaction.units) &&
        Objects.equals(this.unitType, investmentTransaction.unitType) &&
        Objects.equals(this.transactionReason, investmentTransaction.transactionReason) &&
        Objects.equals(this.accruedInterest, investmentTransaction.accruedInterest) &&
        Objects.equals(this.transferAction, investmentTransaction.transferAction) &&
        Objects.equals(this.positionType, investmentTransaction.positionType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionType, shares, faceValue, price, securityId, securityIdType, securityType, symbol, markup, commission, taxes, fees, load, inv401kSource, confirmationNumber, fractionalCash, incomeType, oldUnits, splitRatioNumerator, splitRatioDenominator, newUnits, subAccountSec, subAccountFund, loanId, loanPrincipal, loanInterest, payrollDate, priorYearContrib, withholding, taxExempt, gain, stateWithholding, penalty, runningBalance, unitPrice, units, unitType, transactionReason, accruedInterest, transferAction, positionType, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvestmentTransaction {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    faceValue: ").append(toIndentedString(faceValue)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    securityIdType: ").append(toIndentedString(securityIdType)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    markup: ").append(toIndentedString(markup)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    load: ").append(toIndentedString(load)).append("\n");
    sb.append("    inv401kSource: ").append(toIndentedString(inv401kSource)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    fractionalCash: ").append(toIndentedString(fractionalCash)).append("\n");
    sb.append("    incomeType: ").append(toIndentedString(incomeType)).append("\n");
    sb.append("    oldUnits: ").append(toIndentedString(oldUnits)).append("\n");
    sb.append("    splitRatioNumerator: ").append(toIndentedString(splitRatioNumerator)).append("\n");
    sb.append("    splitRatioDenominator: ").append(toIndentedString(splitRatioDenominator)).append("\n");
    sb.append("    newUnits: ").append(toIndentedString(newUnits)).append("\n");
    sb.append("    subAccountSec: ").append(toIndentedString(subAccountSec)).append("\n");
    sb.append("    subAccountFund: ").append(toIndentedString(subAccountFund)).append("\n");
    sb.append("    loanId: ").append(toIndentedString(loanId)).append("\n");
    sb.append("    loanPrincipal: ").append(toIndentedString(loanPrincipal)).append("\n");
    sb.append("    loanInterest: ").append(toIndentedString(loanInterest)).append("\n");
    sb.append("    payrollDate: ").append(toIndentedString(payrollDate)).append("\n");
    sb.append("    priorYearContrib: ").append(toIndentedString(priorYearContrib)).append("\n");
    sb.append("    withholding: ").append(toIndentedString(withholding)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    gain: ").append(toIndentedString(gain)).append("\n");
    sb.append("    stateWithholding: ").append(toIndentedString(stateWithholding)).append("\n");
    sb.append("    penalty: ").append(toIndentedString(penalty)).append("\n");
    sb.append("    runningBalance: ").append(toIndentedString(runningBalance)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    unitType: ").append(toIndentedString(unitType)).append("\n");
    sb.append("    transactionReason: ").append(toIndentedString(transactionReason)).append("\n");
    sb.append("    accruedInterest: ").append(toIndentedString(accruedInterest)).append("\n");
    sb.append("    transferAction: ").append(toIndentedString(transferAction)).append("\n");
    sb.append("    positionType: ").append(toIndentedString(positionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
