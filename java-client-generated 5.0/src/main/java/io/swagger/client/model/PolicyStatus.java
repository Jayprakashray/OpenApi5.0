/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.v3.oas.annotations.media.Schema;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The status of an insurance policy account.&lt;br/&gt; &lt;br/&gt; | Value | Description |&lt;br/&gt; |-----|-----|&lt;br/&gt; | ACTIVE | At least one component of the insurance policy is in force |&lt;br/&gt; | DEATH_CLAIM_PAID | Benefits for a death claim have been settled with the insured |&lt;br/&gt; | DEATH_CLAIM_PENDING | A death claim has been submitted but not yet settled |&lt;br/&gt; | EXPIRED | Nonpayment of premium has exhausted the policy&#x27;s Grace Period |&lt;br/&gt; | GRACE_PERIOD | A premium is due but before lapse in coverage begins |&lt;br/&gt; | LAPSE_PENDING | After the Grace Period has been exhausted but before final expiration; during Lapse Pending, policy reinstatement may still be possible |&lt;br/&gt; | TERMINATED | Either the insurance company or the insured cancel the coverage of a cancellable insurance policy |&lt;br/&gt; | WAIVER | A premium payment is waived under certain conditions due to a payer benefit clause |
 */
@JsonAdapter(PolicyStatus.Adapter.class)
public enum PolicyStatus {
  ACTIVE("ACTIVE"),
  DEATH_CLAIM_PAID("DEATH_CLAIM_PAID"),
  DEATH_CLAIM_PENDING("DEATH_CLAIM_PENDING"),
  EXPIRED("EXPIRED"),
  GRACE_PERIOD("GRACE_PERIOD"),
  LAPSE_PENDING("LAPSE_PENDING"),
  TERMINATED("TERMINATED"),
  WAIVER("WAIVER");

  private String value;

  PolicyStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PolicyStatus fromValue(String input) {
    for (PolicyStatus b : PolicyStatus.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<PolicyStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final PolicyStatus enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public PolicyStatus read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return PolicyStatus.fromValue((String)(value));
    }
  }
}
