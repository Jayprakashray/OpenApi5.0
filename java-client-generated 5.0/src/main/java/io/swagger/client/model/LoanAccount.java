/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Account;
import io.swagger.client.model.AccountBillPayStatus;
import io.swagger.client.model.AccountContact;
import io.swagger.client.model.BalanceType;
import io.swagger.client.model.CompoundingPeriod;
import io.swagger.client.model.InterestRateType;
import io.swagger.client.model.LoanTransaction;
import io.swagger.client.model.PaymentFrequency;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
/**
 * A loan account type
 */
@Schema(description = "A loan account type")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-06-16T18:27:34.841Z[GMT]")
public class LoanAccount extends Account {
  @SerializedName("balanceAsOf")
  private OffsetDateTime balanceAsOf = null;

  @SerializedName("principalBalance")
  private BigDecimal principalBalance = null;

  @SerializedName("escrowBalance")
  private BigDecimal escrowBalance = null;

  @SerializedName("originalPrincipal")
  private BigDecimal originalPrincipal = null;

  @SerializedName("originatingDate")
  private LocalDate originatingDate = null;

  @SerializedName("loanTerm")
  private Integer loanTerm = null;

  @SerializedName("totalNumberOfPayments")
  private Integer totalNumberOfPayments = null;

  @SerializedName("nextPaymentAmount")
  private BigDecimal nextPaymentAmount = null;

  @SerializedName("nextPaymentDate")
  private LocalDate nextPaymentDate = null;

  @SerializedName("paymentFrequency")
  private PaymentFrequency paymentFrequency = null;

  @SerializedName("compoundingPeriod")
  private CompoundingPeriod compoundingPeriod = null;

  @SerializedName("payOffAmount")
  private BigDecimal payOffAmount = null;

  @SerializedName("lastPaymentAmount")
  private BigDecimal lastPaymentAmount = null;

  @SerializedName("lastPaymentDate")
  private LocalDate lastPaymentDate = null;

  @SerializedName("maturityDate")
  private LocalDate maturityDate = null;

  @SerializedName("interestPaidYearToDate")
  private BigDecimal interestPaidYearToDate = null;

  @SerializedName("transactions")
  private List<LoanTransaction> transactions = null;

  public LoanAccount balanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @Schema(description = "")
  public OffsetDateTime getBalanceAsOf() {
    return balanceAsOf;
  }

  public void setBalanceAsOf(OffsetDateTime balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }

  public LoanAccount principalBalance(BigDecimal principalBalance) {
    this.principalBalance = principalBalance;
    return this;
  }

   /**
   * Principal balance of loan
   * @return principalBalance
  **/
  @Schema(description = "Principal balance of loan")
  public BigDecimal getPrincipalBalance() {
    return principalBalance;
  }

  public void setPrincipalBalance(BigDecimal principalBalance) {
    this.principalBalance = principalBalance;
  }

  public LoanAccount escrowBalance(BigDecimal escrowBalance) {
    this.escrowBalance = escrowBalance;
    return this;
  }

   /**
   * Escrow balance of loan
   * @return escrowBalance
  **/
  @Schema(description = "Escrow balance of loan")
  public BigDecimal getEscrowBalance() {
    return escrowBalance;
  }

  public void setEscrowBalance(BigDecimal escrowBalance) {
    this.escrowBalance = escrowBalance;
  }

  public LoanAccount originalPrincipal(BigDecimal originalPrincipal) {
    this.originalPrincipal = originalPrincipal;
    return this;
  }

   /**
   * Original principal of loan
   * @return originalPrincipal
  **/
  @Schema(description = "Original principal of loan")
  public BigDecimal getOriginalPrincipal() {
    return originalPrincipal;
  }

  public void setOriginalPrincipal(BigDecimal originalPrincipal) {
    this.originalPrincipal = originalPrincipal;
  }

  public LoanAccount originatingDate(LocalDate originatingDate) {
    this.originatingDate = originatingDate;
    return this;
  }

   /**
   * Get originatingDate
   * @return originatingDate
  **/
  @Schema(description = "")
  public LocalDate getOriginatingDate() {
    return originatingDate;
  }

  public void setOriginatingDate(LocalDate originatingDate) {
    this.originatingDate = originatingDate;
  }

  public LoanAccount loanTerm(Integer loanTerm) {
    this.loanTerm = loanTerm;
    return this;
  }

   /**
   * Term of loan in months
   * @return loanTerm
  **/
  @Schema(description = "Term of loan in months")
  public Integer getLoanTerm() {
    return loanTerm;
  }

  public void setLoanTerm(Integer loanTerm) {
    this.loanTerm = loanTerm;
  }

  public LoanAccount totalNumberOfPayments(Integer totalNumberOfPayments) {
    this.totalNumberOfPayments = totalNumberOfPayments;
    return this;
  }

   /**
   * Total number of payments
   * @return totalNumberOfPayments
  **/
  @Schema(description = "Total number of payments")
  public Integer getTotalNumberOfPayments() {
    return totalNumberOfPayments;
  }

  public void setTotalNumberOfPayments(Integer totalNumberOfPayments) {
    this.totalNumberOfPayments = totalNumberOfPayments;
  }

  public LoanAccount nextPaymentAmount(BigDecimal nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
    return this;
  }

   /**
   * Amount of next payment
   * @return nextPaymentAmount
  **/
  @Schema(description = "Amount of next payment")
  public BigDecimal getNextPaymentAmount() {
    return nextPaymentAmount;
  }

  public void setNextPaymentAmount(BigDecimal nextPaymentAmount) {
    this.nextPaymentAmount = nextPaymentAmount;
  }

  public LoanAccount nextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
    return this;
  }

   /**
   * Get nextPaymentDate
   * @return nextPaymentDate
  **/
  @Schema(description = "")
  public LocalDate getNextPaymentDate() {
    return nextPaymentDate;
  }

  public void setNextPaymentDate(LocalDate nextPaymentDate) {
    this.nextPaymentDate = nextPaymentDate;
  }

  public LoanAccount paymentFrequency(PaymentFrequency paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
    return this;
  }

   /**
   * Get paymentFrequency
   * @return paymentFrequency
  **/
  @Schema(description = "")
  public PaymentFrequency getPaymentFrequency() {
    return paymentFrequency;
  }

  public void setPaymentFrequency(PaymentFrequency paymentFrequency) {
    this.paymentFrequency = paymentFrequency;
  }

  public LoanAccount compoundingPeriod(CompoundingPeriod compoundingPeriod) {
    this.compoundingPeriod = compoundingPeriod;
    return this;
  }

   /**
   * Get compoundingPeriod
   * @return compoundingPeriod
  **/
  @Schema(description = "")
  public CompoundingPeriod getCompoundingPeriod() {
    return compoundingPeriod;
  }

  public void setCompoundingPeriod(CompoundingPeriod compoundingPeriod) {
    this.compoundingPeriod = compoundingPeriod;
  }

  public LoanAccount payOffAmount(BigDecimal payOffAmount) {
    this.payOffAmount = payOffAmount;
    return this;
  }

   /**
   * Payoff amount
   * @return payOffAmount
  **/
  @Schema(description = "Payoff amount")
  public BigDecimal getPayOffAmount() {
    return payOffAmount;
  }

  public void setPayOffAmount(BigDecimal payOffAmount) {
    this.payOffAmount = payOffAmount;
  }

  public LoanAccount lastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * Last payment amount
   * @return lastPaymentAmount
  **/
  @Schema(description = "Last payment amount")
  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }

  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }

  public LoanAccount lastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * Get lastPaymentDate
   * @return lastPaymentDate
  **/
  @Schema(description = "")
  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }

  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }

  public LoanAccount maturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * Get maturityDate
   * @return maturityDate
  **/
  @Schema(description = "")
  public LocalDate getMaturityDate() {
    return maturityDate;
  }

  public void setMaturityDate(LocalDate maturityDate) {
    this.maturityDate = maturityDate;
  }

  public LoanAccount interestPaidYearToDate(BigDecimal interestPaidYearToDate) {
    this.interestPaidYearToDate = interestPaidYearToDate;
    return this;
  }

   /**
   * Interest paid year to date
   * @return interestPaidYearToDate
  **/
  @Schema(description = "Interest paid year to date")
  public BigDecimal getInterestPaidYearToDate() {
    return interestPaidYearToDate;
  }

  public void setInterestPaidYearToDate(BigDecimal interestPaidYearToDate) {
    this.interestPaidYearToDate = interestPaidYearToDate;
  }

  public LoanAccount transactions(List<LoanTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public LoanAccount addTransactionsItem(LoanTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<LoanTransaction>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions on the loan account
   * @return transactions
  **/
  @Schema(description = "Transactions on the loan account")
  public List<LoanTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<LoanTransaction> transactions) {
    this.transactions = transactions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanAccount loanAccount = (LoanAccount) o;
    return Objects.equals(this.balanceAsOf, loanAccount.balanceAsOf) &&
        Objects.equals(this.principalBalance, loanAccount.principalBalance) &&
        Objects.equals(this.escrowBalance, loanAccount.escrowBalance) &&
        Objects.equals(this.originalPrincipal, loanAccount.originalPrincipal) &&
        Objects.equals(this.originatingDate, loanAccount.originatingDate) &&
        Objects.equals(this.loanTerm, loanAccount.loanTerm) &&
        Objects.equals(this.totalNumberOfPayments, loanAccount.totalNumberOfPayments) &&
        Objects.equals(this.nextPaymentAmount, loanAccount.nextPaymentAmount) &&
        Objects.equals(this.nextPaymentDate, loanAccount.nextPaymentDate) &&
        Objects.equals(this.paymentFrequency, loanAccount.paymentFrequency) &&
        Objects.equals(this.compoundingPeriod, loanAccount.compoundingPeriod) &&
        Objects.equals(this.payOffAmount, loanAccount.payOffAmount) &&
        Objects.equals(this.lastPaymentAmount, loanAccount.lastPaymentAmount) &&
        Objects.equals(this.lastPaymentDate, loanAccount.lastPaymentDate) &&
        Objects.equals(this.maturityDate, loanAccount.maturityDate) &&
        Objects.equals(this.interestPaidYearToDate, loanAccount.interestPaidYearToDate) &&
        Objects.equals(this.transactions, loanAccount.transactions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceAsOf, principalBalance, escrowBalance, originalPrincipal, originatingDate, loanTerm, totalNumberOfPayments, nextPaymentAmount, nextPaymentDate, paymentFrequency, compoundingPeriod, payOffAmount, lastPaymentAmount, lastPaymentDate, maturityDate, interestPaidYearToDate, transactions, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanAccount {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    principalBalance: ").append(toIndentedString(principalBalance)).append("\n");
    sb.append("    escrowBalance: ").append(toIndentedString(escrowBalance)).append("\n");
    sb.append("    originalPrincipal: ").append(toIndentedString(originalPrincipal)).append("\n");
    sb.append("    originatingDate: ").append(toIndentedString(originatingDate)).append("\n");
    sb.append("    loanTerm: ").append(toIndentedString(loanTerm)).append("\n");
    sb.append("    totalNumberOfPayments: ").append(toIndentedString(totalNumberOfPayments)).append("\n");
    sb.append("    nextPaymentAmount: ").append(toIndentedString(nextPaymentAmount)).append("\n");
    sb.append("    nextPaymentDate: ").append(toIndentedString(nextPaymentDate)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    compoundingPeriod: ").append(toIndentedString(compoundingPeriod)).append("\n");
    sb.append("    payOffAmount: ").append(toIndentedString(payOffAmount)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    interestPaidYearToDate: ").append(toIndentedString(interestPaidYearToDate)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
