/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.PostProcessor;
import io.gsonfire.TypeSelector;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

import io.swagger.client.model.*;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();

    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
          .registerTypeSelector(AccountDescriptor.class, new TypeSelector<AccountDescriptor>() {
            @Override
            public Class<? extends AccountDescriptor> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends AccountDescriptor>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("Account".toUpperCase(), Account.class);
                    classByDiscriminatorValue.put("AccountDescriptor".toUpperCase(), AccountDescriptor.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(AccountDescriptor.class, new PostProcessor<AccountDescriptor>() {
              @Override
              public void postDeserialize(AccountDescriptor result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, AccountDescriptor src, Gson gson) {
                  Map<Class<? extends AccountDescriptor>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(Account.class, "Account");
                      discriminatorValueByClass.put(AccountDescriptor.class, "AccountDescriptor");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Customer.class, new TypeSelector<Customer>() {
            @Override
            public Class<? extends Customer> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Customer>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AccountHolder".toUpperCase(), AccountHolder.class);
                    classByDiscriminatorValue.put("Customer".toUpperCase(), Customer.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Customer.class, new PostProcessor<Customer>() {
              @Override
              public void postDeserialize(Customer result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Customer src, Gson gson) {
                  Map<Class<? extends Customer>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AccountHolder.class, "AccountHolder");
                      discriminatorValueByClass.put(Customer.class, "Customer");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(PaginatedArray.class, new TypeSelector<PaginatedArray>() {
            @Override
            public Class<? extends PaginatedArray> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends PaginatedArray>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AccountPaymentNetworkList".toUpperCase(), AccountPaymentNetworkList.class);
                    classByDiscriminatorValue.put("Accounts".toUpperCase(), Accounts.class);
                    classByDiscriminatorValue.put("RewardCategories".toUpperCase(), RewardCategories.class);
                    classByDiscriminatorValue.put("RewardPrograms".toUpperCase(), RewardPrograms.class);
                    classByDiscriminatorValue.put("Statements".toUpperCase(), Statements.class);
                    classByDiscriminatorValue.put("Transactions".toUpperCase(), Transactions.class);
                    classByDiscriminatorValue.put("PaginatedArray".toUpperCase(), PaginatedArray.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(PaginatedArray.class, new PostProcessor<PaginatedArray>() {
              @Override
              public void postDeserialize(PaginatedArray result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, PaginatedArray src, Gson gson) {
                  Map<Class<? extends PaginatedArray>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AccountPaymentNetworkList.class, "AccountPaymentNetworkList");
                      discriminatorValueByClass.put(Accounts.class, "Accounts");
                      discriminatorValueByClass.put(RewardCategories.class, "RewardCategories");
                      discriminatorValueByClass.put(RewardPrograms.class, "RewardPrograms");
                      discriminatorValueByClass.put(Statements.class, "Statements");
                      discriminatorValueByClass.put(Transactions.class, "Transactions");
                      discriminatorValueByClass.put(PaginatedArray.class, "PaginatedArray");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(String.class, new TypeSelector<String>() {
            @Override
            public Class<? extends String> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends String>> classByDiscriminatorValue = new HashMap<>();
//                    classByDiscriminatorValue.put("AllOfAddressState".toUpperCase(), AllOfAddressState.class);
                    classByDiscriminatorValue.put("String".toUpperCase(), String.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(String.class, new PostProcessor<String>() {
              @Override
              public void postDeserialize(String result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, String src, Gson gson) {
                  Map<Class<? extends String>, String> discriminatorValueByClass = new HashMap<>();
//                      discriminatorValueByClass.put(AllOfAddressState.class, "AllOfAddressState");
                      discriminatorValueByClass.put(String.class, "String");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Account.class, new TypeSelector<Account>() {
            @Override
            public Class<? extends Account> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Account>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("AnnuityAccount".toUpperCase(), AnnuityAccount.class);
                    classByDiscriminatorValue.put("DepositAccount".toUpperCase(), DepositAccount.class);
                    classByDiscriminatorValue.put("InsuranceAccount".toUpperCase(), InsuranceAccount.class);
                    classByDiscriminatorValue.put("InvestmentAccount".toUpperCase(), InvestmentAccount.class);
                    classByDiscriminatorValue.put("LoanAccount".toUpperCase(), LoanAccount.class);
                    classByDiscriminatorValue.put("LocAccount".toUpperCase(), LocAccount.class);
                    classByDiscriminatorValue.put("Account".toUpperCase(), Account.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Account.class, new PostProcessor<Account>() {
              @Override
              public void postDeserialize(Account result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Account src, Gson gson) {
                  Map<Class<? extends Account>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(AnnuityAccount.class, "AnnuityAccount");
                      discriminatorValueByClass.put(DepositAccount.class, "DepositAccount");
                      discriminatorValueByClass.put(InsuranceAccount.class, "InsuranceAccount");
                      discriminatorValueByClass.put(InvestmentAccount.class, "InvestmentAccount");
                      discriminatorValueByClass.put(LoanAccount.class, "LoanAccount");
                      discriminatorValueByClass.put(LocAccount.class, "LocAccount");
                      discriminatorValueByClass.put(Account.class, "Account");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Party.class, new TypeSelector<Party>() {
            @Override
            public Class<? extends Party> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Party>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("ConsentGrantParty".toUpperCase(), ConsentGrantParty.class);
                    classByDiscriminatorValue.put("Party".toUpperCase(), Party.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Party.class, new PostProcessor<Party>() {
              @Override
              public void postDeserialize(Party result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Party src, Gson gson) {
                  Map<Class<? extends Party>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(ConsentGrantParty.class, "ConsentGrantParty");
                      discriminatorValueByClass.put(Party.class, "Party");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(IndividualName.class, new TypeSelector<IndividualName>() {
            @Override
            public Class<? extends IndividualName> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends IndividualName>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("CustomerName".toUpperCase(), CustomerName.class);
                    classByDiscriminatorValue.put("IndividualName".toUpperCase(), IndividualName.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(IndividualName.class, new PostProcessor<IndividualName>() {
              @Override
              public void postDeserialize(IndividualName result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, IndividualName src, Gson gson) {
                  Map<Class<? extends IndividualName>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(CustomerName.class, "CustomerName");
                      discriminatorValueByClass.put(IndividualName.class, "IndividualName");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Address.class, new TypeSelector<Address>() {
            @Override
            public Class<? extends Address> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Address>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DeliveryAddress".toUpperCase(), DeliveryAddress.class);
                    classByDiscriminatorValue.put("NameAddress".toUpperCase(), NameAddress.class);
                    classByDiscriminatorValue.put("Address".toUpperCase(), Address.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Address.class, new PostProcessor<Address>() {
              @Override
              public void postDeserialize(Address result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Address src, Gson gson) {
                  Map<Class<? extends Address>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DeliveryAddress.class, "DeliveryAddress");
                      discriminatorValueByClass.put(NameAddress.class, "NameAddress");
                      discriminatorValueByClass.put(Address.class, "Address");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(Transaction.class, new TypeSelector<Transaction>() {
            @Override
            public Class<? extends Transaction> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends Transaction>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("DepositTransaction".toUpperCase(), DepositTransaction.class);
                    classByDiscriminatorValue.put("InsuranceTransaction".toUpperCase(), InsuranceTransaction.class);
                    classByDiscriminatorValue.put("InvestmentTransaction".toUpperCase(), InvestmentTransaction.class);
                    classByDiscriminatorValue.put("LoanTransaction".toUpperCase(), LoanTransaction.class);
                    classByDiscriminatorValue.put("LocTransaction".toUpperCase(), LocTransaction.class);
                    classByDiscriminatorValue.put("Transaction".toUpperCase(), Transaction.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(Transaction.class, new PostProcessor<Transaction>() {
              @Override
              public void postDeserialize(Transaction result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, Transaction src, Gson gson) {
                  Map<Class<? extends Transaction>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(DepositTransaction.class, "DepositTransaction");
                      discriminatorValueByClass.put(InsuranceTransaction.class, "InsuranceTransaction");
                      discriminatorValueByClass.put(InvestmentTransaction.class, "InvestmentTransaction");
                      discriminatorValueByClass.put(LoanTransaction.class, "LoanTransaction");
                      discriminatorValueByClass.put(LocTransaction.class, "LocTransaction");
                      discriminatorValueByClass.put(Transaction.class, "Transaction");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(NameAddress.class, new TypeSelector<NameAddress>() {
            @Override
            public Class<? extends NameAddress> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends NameAddress>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("NameAddressPhone".toUpperCase(), NameAddressPhone.class);
                    classByDiscriminatorValue.put("NameAddress".toUpperCase(), NameAddress.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(NameAddress.class, new PostProcessor<NameAddress>() {
              @Override
              public void postDeserialize(NameAddress result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, NameAddress src, Gson gson) {
                  Map<Class<? extends NameAddress>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(NameAddressPhone.class, "NameAddressPhone");
                      discriminatorValueByClass.put(NameAddress.class, "NameAddress");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
          .registerTypeSelector(TelephoneNumber.class, new TypeSelector<TelephoneNumber>() {
            @Override
            public Class<? extends TelephoneNumber> getClassForElement(JsonElement readElement) {
                Map<String, Class<? extends TelephoneNumber>> classByDiscriminatorValue = new HashMap<>();
                    classByDiscriminatorValue.put("TelephoneNumberPlusExtension".toUpperCase(), TelephoneNumberPlusExtension.class);
                    classByDiscriminatorValue.put("TelephoneNumber".toUpperCase(), TelephoneNumber.class);
                return getClassByDiscriminator(
                            classByDiscriminatorValue,
                            getDiscriminatorValue(readElement, ""));
            }
          })
          .registerPostProcessor(TelephoneNumber.class, new PostProcessor<TelephoneNumber>() {
              @Override
              public void postDeserialize(TelephoneNumber result, JsonElement src, Gson gson) {

              }

              @Override
              public void postSerialize(JsonElement result, TelephoneNumber src, Gson gson) {
                  Map<Class<? extends TelephoneNumber>, String> discriminatorValueByClass = new HashMap<>();
                      discriminatorValueByClass.put(TelephoneNumberPlusExtension.class, "TelephoneNumberPlusExtension");
                      discriminatorValueByClass.put(TelephoneNumber.class, "TelephoneNumber");
                  if(result instanceof JsonObject)
                  {
                      if(!((JsonObject) result).has(""))
                      {
                          ((JsonObject) result).addProperty("", discriminatorValueByClass.get(src.getClass()));
                      }
                  }
              }
          })
        ;
        return fireBuilder.createGsonBuilder();
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if(null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    private static <T> Class<? extends T> getClassByDiscriminator(Map<String, Class<? extends T>> classByDiscriminatorValue, String discriminatorValue) {
        Class<? extends T> clazz = classByDiscriminatorValue.get(discriminatorValue.toUpperCase());
        if(null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class))
                return (T) body;
            else throw (e);
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {
        }

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {
        }

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
