/*
 * FDX V5.0
 * Financial Data Exchange V5.0 Core API
 *
 * OpenAPI spec version: 5.0.0
 * Contact: fdxsupport@financialdataexchange.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AvailabilityList;
import io.swagger.client.model.Capability;
import io.swagger.client.model.CertificationMetrics;
import io.swagger.client.model.FdxVersion;
import io.swagger.client.model.OperationId;
import io.swagger.client.model.ResultType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaApi {
    private ApiClient apiClient;

    public MetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAvailability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailabilityCall(String authorization, OperationId operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/availability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operationId", operationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvailabilityValidateBeforeCall(String authorization, OperationId operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAvailability(Async)");
        }
        
        com.squareup.okhttp.Call call = getAvailabilityCall(authorization, operationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get API availability
     * Get information about this API&#x27;s availability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @return AvailabilityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AvailabilityList getAvailability(String authorization, OperationId operationId) throws ApiException {
        ApiResponse<AvailabilityList> resp = getAvailabilityWithHttpInfo(authorization, operationId);
        return resp.getData();
    }

    /**
     * Get API availability
     * Get information about this API&#x27;s availability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @return ApiResponse&lt;AvailabilityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AvailabilityList> getAvailabilityWithHttpInfo(String authorization, OperationId operationId) throws ApiException {
        com.squareup.okhttp.Call call = getAvailabilityValidateBeforeCall(authorization, operationId, null, null);
        Type localVarReturnType = new TypeToken<AvailabilityList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get API availability (asynchronously)
     * Get information about this API&#x27;s availability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailabilityAsync(String authorization, OperationId operationId, final ApiCallback<AvailabilityList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailabilityValidateBeforeCall(authorization, operationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AvailabilityList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCapability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param fdxVersion Specific FDX version for which to get the capability. Optional (optional)
     * @param resultType Flag to indicate if you want a lightweight array of metadata (AccountDescriptor or Tax or Operations) or full item details (Account or a Tax subclass or Availability details). If set to &#x27;lightweight&#x27;, should only return the fields associated with the metadata entity. This field is not required, defaults to lightweight (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCapabilityCall(String authorization, OperationId operationId, FdxVersion fdxVersion, ResultType resultType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/capability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operationId", operationId));
        if (fdxVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fdxVersion", fdxVersion));
        if (resultType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resultType", resultType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCapabilityValidateBeforeCall(String authorization, OperationId operationId, FdxVersion fdxVersion, ResultType resultType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCapability(Async)");
        }
        
        com.squareup.okhttp.Call call = getCapabilityCall(authorization, operationId, fdxVersion, resultType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get API capability
     * Get information about this API&#x27;s capability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param fdxVersion Specific FDX version for which to get the capability. Optional (optional)
     * @param resultType Flag to indicate if you want a lightweight array of metadata (AccountDescriptor or Tax or Operations) or full item details (Account or a Tax subclass or Availability details). If set to &#x27;lightweight&#x27;, should only return the fields associated with the metadata entity. This field is not required, defaults to lightweight (optional)
     * @return Capability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Capability getCapability(String authorization, OperationId operationId, FdxVersion fdxVersion, ResultType resultType) throws ApiException {
        ApiResponse<Capability> resp = getCapabilityWithHttpInfo(authorization, operationId, fdxVersion, resultType);
        return resp.getData();
    }

    /**
     * Get API capability
     * Get information about this API&#x27;s capability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param fdxVersion Specific FDX version for which to get the capability. Optional (optional)
     * @param resultType Flag to indicate if you want a lightweight array of metadata (AccountDescriptor or Tax or Operations) or full item details (Account or a Tax subclass or Availability details). If set to &#x27;lightweight&#x27;, should only return the fields associated with the metadata entity. This field is not required, defaults to lightweight (optional)
     * @return ApiResponse&lt;Capability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Capability> getCapabilityWithHttpInfo(String authorization, OperationId operationId, FdxVersion fdxVersion, ResultType resultType) throws ApiException {
        com.squareup.okhttp.Call call = getCapabilityValidateBeforeCall(authorization, operationId, fdxVersion, resultType, null, null);
        Type localVarReturnType = new TypeToken<Capability>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get API capability (asynchronously)
     * Get information about this API&#x27;s capability
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param fdxVersion Specific FDX version for which to get the capability. Optional (optional)
     * @param resultType Flag to indicate if you want a lightweight array of metadata (AccountDescriptor or Tax or Operations) or full item details (Account or a Tax subclass or Availability details). If set to &#x27;lightweight&#x27;, should only return the fields associated with the metadata entity. This field is not required, defaults to lightweight (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCapabilityAsync(String authorization, OperationId operationId, FdxVersion fdxVersion, ResultType resultType, final ApiCallback<Capability> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCapabilityValidateBeforeCall(authorization, operationId, fdxVersion, resultType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Capability>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificationMetrics
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificationMetricsCall(String authorization, OperationId operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/certification-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operationId", operationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificationMetricsValidateBeforeCall(String authorization, OperationId operationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCertificationMetrics(Async)");
        }
        
        com.squareup.okhttp.Call call = getCertificationMetricsCall(authorization, operationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get certification performance metrics
     * Get certification performance metrics for this implementer&#x27;s APIs
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @return CertificationMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificationMetrics getCertificationMetrics(String authorization, OperationId operationId) throws ApiException {
        ApiResponse<CertificationMetrics> resp = getCertificationMetricsWithHttpInfo(authorization, operationId);
        return resp.getData();
    }

    /**
     * Get certification performance metrics
     * Get certification performance metrics for this implementer&#x27;s APIs
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @return ApiResponse&lt;CertificationMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificationMetrics> getCertificationMetricsWithHttpInfo(String authorization, OperationId operationId) throws ApiException {
        com.squareup.okhttp.Call call = getCertificationMetricsValidateBeforeCall(authorization, operationId, null, null);
        Type localVarReturnType = new TypeToken<CertificationMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get certification performance metrics (asynchronously)
     * Get certification performance metrics for this implementer&#x27;s APIs
     * @param authorization Access token for authentication and authorization (required)
     * @param operationId Specific operationId for which to get the metrics. Optional (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificationMetricsAsync(String authorization, OperationId operationId, final ApiCallback<CertificationMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificationMetricsValidateBeforeCall(authorization, operationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificationMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
